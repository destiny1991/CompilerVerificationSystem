预处理源代码开始...
预处理源代码结束
====================Source C Code==================
#include <stdio.h>
#include <stdlib.h>

int main() {
    int a;
    int b;
    int c;
    int d;

    scanf("%d %d", &a, &b);
    c = 0;
    do {
        if (a % 2 == 0) {
            c = c - a * 2;
        }
        c = c + a * 2;
        a++;
    } while (a < b);
    printf("c is %d for the first time!", c);

    scanf("%d", &a);
    b = 1;
    c = b * b;
    while (c < a) {
        b++;
        c = b * b;
    }
    printf("The biggest sqrt root of %d is %d", a, b);
    
    return 0;
}

源代码标号开始...
源代码编号结束!
====================Labeled C Code==================
#include <stdio.h>                                // 1
#include <stdlib.h>                               // 2

int main() {                                      // 3
    int a;                                        // 3.1
    int b;                                        // 3.2
    int c;                                        // 3.3
    int d;                                        // 3.4

    scanf("%d %d", &a, &b);                       // 3.5
    c = 0;                                        // 3.6
    do {                                          // 3.7
        if (a % 2 == 0) {                         // 3.7.1
            c = c - a * 2;                        // 3.7.1.1
        }                                         // 3.7.2
        c = c + a * 2;                            // 3.7.3
        a++;                                      // 3.7.4
    } while (a < b);                              // 3.8
    printf("c is %d for the first time!", c);     // 3.9

    scanf("%d", &a);                              // 3.10
    b = 1;                                        // 3.11
    c = b * b;                                    // 3.12
    while (c < a) {                               // 3.13
        b++;                                      // 3.13.1
        c = b * b;                                // 3.13.2
    }                                             // 3.14
    printf("The biggest sqrt root of %d is %d", a, b);// 3.15
    
    return 0;                                     // 3.16
}                                                 // 4

词法分析开始...
词法分析结束!
====================Lexer==================
(#, SHARP, 1)
(include, INCLUDE, 1)
(<, LT, 1)
(stdio.h, IDENTIFIER, 1)
(>, GT, 1)
(#, SHARP, 2)
(include, INCLUDE, 2)
(<, LT, 2)
(stdlib.h, IDENTIFIER, 2)
(>, GT, 2)
(int, INT, 3)
(main, IDENTIFIER, 3)
((, LL_BRACKET, 3)
(), RL_BRACKET, 3)
({, LB_BRACKET, 3)
(int, INT, 3.1)
(a, IDENTIFIER, 3.1)
(;, SEMICOLON, 3.1)
(int, INT, 3.2)
(b, IDENTIFIER, 3.2)
(;, SEMICOLON, 3.2)
(int, INT, 3.3)
(c, IDENTIFIER, 3.3)
(;, SEMICOLON, 3.3)
(int, INT, 3.4)
(d, IDENTIFIER, 3.4)
(;, SEMICOLON, 3.4)
(scanf, IDENTIFIER, 3.5)
((, LL_BRACKET, 3.5)
(", DOUBLE_QUOTE, 3.5)
(%d %d, STRING_CONSTANT, 3.5)
(", DOUBLE_QUOTE, 3.5)
(,, COMMA, 3.5)
(&, ADDRESS, 3.5)
(a, IDENTIFIER, 3.5)
(,, COMMA, 3.5)
(&, ADDRESS, 3.5)
(b, IDENTIFIER, 3.5)
(), RL_BRACKET, 3.5)
(;, SEMICOLON, 3.5)
(c, IDENTIFIER, 3.6)
(=, ASSIGN, 3.6)
(0, DIGIT_CONSTANT, 3.6)
(;, SEMICOLON, 3.6)
(do, DO, 3.7)
({, LB_BRACKET, 3.7)
(if, IF, 3.7.1)
((, LL_BRACKET, 3.7.1)
(a, IDENTIFIER, 3.7.1)
(%, MOD, 3.7.1)
(2, DIGIT_CONSTANT, 3.7.1)
(==, EQU, 3.7.1)
(0, DIGIT_CONSTANT, 3.7.1)
(), RL_BRACKET, 3.7.1)
({, LB_BRACKET, 3.7.1)
(c, IDENTIFIER, 3.7.1.1)
(=, ASSIGN, 3.7.1.1)
(c, IDENTIFIER, 3.7.1.1)
(-, MINUS, 3.7.1.1)
(a, IDENTIFIER, 3.7.1.1)
(*, MUL, 3.7.1.1)
(2, DIGIT_CONSTANT, 3.7.1.1)
(;, SEMICOLON, 3.7.1.1)
(}, RB_BRACKET, 3.7.2)
(c, IDENTIFIER, 3.7.3)
(=, ASSIGN, 3.7.3)
(c, IDENTIFIER, 3.7.3)
(+, PLUS, 3.7.3)
(a, IDENTIFIER, 3.7.3)
(*, MUL, 3.7.3)
(2, DIGIT_CONSTANT, 3.7.3)
(;, SEMICOLON, 3.7.3)
(a, IDENTIFIER, 3.7.4)
(++, SELF_PLUS, 3.7.4)
(;, SEMICOLON, 3.7.4)
(}, RB_BRACKET, 3.8)
(while, WHILE, 3.8)
((, LL_BRACKET, 3.8)
(a, IDENTIFIER, 3.8)
(<, LT, 3.8)
(b, IDENTIFIER, 3.8)
(), RL_BRACKET, 3.8)
(;, SEMICOLON, 3.8)
(printf, IDENTIFIER, 3.9)
((, LL_BRACKET, 3.9)
(", DOUBLE_QUOTE, 3.9)
(c is %d for the first time!, STRING_CONSTANT, 3.9)
(", DOUBLE_QUOTE, 3.9)
(,, COMMA, 3.9)
(c, IDENTIFIER, 3.9)
(), RL_BRACKET, 3.9)
(;, SEMICOLON, 3.9)
(scanf, IDENTIFIER, 3.10)
((, LL_BRACKET, 3.10)
(", DOUBLE_QUOTE, 3.10)
(%d, STRING_CONSTANT, 3.10)
(", DOUBLE_QUOTE, 3.10)
(,, COMMA, 3.10)
(&, ADDRESS, 3.10)
(a, IDENTIFIER, 3.10)
(), RL_BRACKET, 3.10)
(;, SEMICOLON, 3.10)
(b, IDENTIFIER, 3.11)
(=, ASSIGN, 3.11)
(1, DIGIT_CONSTANT, 3.11)
(;, SEMICOLON, 3.11)
(c, IDENTIFIER, 3.12)
(=, ASSIGN, 3.12)
(b, IDENTIFIER, 3.12)
(*, MUL, 3.12)
(b, IDENTIFIER, 3.12)
(;, SEMICOLON, 3.12)
(while, WHILE, 3.13)
((, LL_BRACKET, 3.13)
(c, IDENTIFIER, 3.13)
(<, LT, 3.13)
(a, IDENTIFIER, 3.13)
(), RL_BRACKET, 3.13)
({, LB_BRACKET, 3.13)
(b, IDENTIFIER, 3.13.1)
(++, SELF_PLUS, 3.13.1)
(;, SEMICOLON, 3.13.1)
(c, IDENTIFIER, 3.13.2)
(=, ASSIGN, 3.13.2)
(b, IDENTIFIER, 3.13.2)
(*, MUL, 3.13.2)
(b, IDENTIFIER, 3.13.2)
(;, SEMICOLON, 3.13.2)
(}, RB_BRACKET, 3.14)
(printf, IDENTIFIER, 3.15)
((, LL_BRACKET, 3.15)
(", DOUBLE_QUOTE, 3.15)
(The biggest sqrt root of %d is %d, STRING_CONSTANT, 3.15)
(", DOUBLE_QUOTE, 3.15)
(,, COMMA, 3.15)
(a, IDENTIFIER, 3.15)
(,, COMMA, 3.15)
(b, IDENTIFIER, 3.15)
(), RL_BRACKET, 3.15)
(;, SEMICOLON, 3.15)
(return, RETURN, 3.16)
(0, DIGIT_CONSTANT, 3.16)
(;, SEMICOLON, 3.16)
(}, RB_BRACKET, 4)

语法分析开始...
  include语句 : 语法合法
  include语句 : 语法合法
  变量声明语句 : 语法合法
  变量声明语句 : 语法合法
  变量声明语句 : 语法合法
  变量声明语句 : 语法合法
  函数调用语句 : 语法合法
  表达式语句 : 语法合法
  赋值语句 : 语法合法
  表达式语句 : 语法合法
  表达式语句 : 语法合法
  赋值语句 : 语法合法
  if-else语句 : 语法合法
  表达式语句 : 语法合法
  赋值语句 : 语法合法
  表达式语句 : 语法合法
  表达式语句 : 语法合法
  do-while语句 : 语法合法
  函数调用语句 : 语法合法
  函数调用语句 : 语法合法
  表达式语句 : 语法合法
  赋值语句 : 语法合法
  表达式语句 : 语法合法
  赋值语句 : 语法合法
  表达式语句 : 语法合法
  表达式语句 : 语法合法
  表达式语句 : 语法合法
  赋值语句 : 语法合法
  while语句 : 语法合法
  函数调用语句 : 语法合法
  表达式语句 : 语法合法
  return语句 : 语法合法
  函数定义 : 语法合法
语法分析结束!
====================Parser==================
( self: Sentence null null, father: null, left: null, right: null )
( self: Include null null, father: Sentence, left: null, right: Include )
( self: # SHARP 1, father: Include, left: null, right: include )
( self: include INCLUDE 1, father: Include, left: #, right: < )
( self: < LT 1, father: Include, left: include, right: stdio.h )
( self: stdio.h IDENTIFIER 1, father: Include, left: <, right: > )
( self: > GT 1, father: Include, left: stdio.h, right: null )
( self: Include null null, father: Sentence, left: Include, right: FunctionStatement )
( self: # SHARP 2, father: Include, left: null, right: include )
( self: include INCLUDE 2, father: Include, left: #, right: < )
( self: < LT 2, father: Include, left: include, right: stdlib.h )
( self: stdlib.h IDENTIFIER 2, father: Include, left: <, right: > )
( self: > GT 2, father: Include, left: stdlib.h, right: null )
( self: FunctionStatement null null, father: Sentence, left: Include, right: null )
( self: Type null null, father: FunctionStatement, left: null, right: FunctionName )
( self: int FIELD_TYPE 3, father: Type, left: null, right: null )
( self: FunctionName null null, father: FunctionStatement, left: Type, right: StateParameterList )
( self: main IDENTIFIER 3, father: FunctionName, left: null, right: null )
( self: StateParameterList null null, father: FunctionStatement, left: FunctionName, right: Sentence )
( self: Sentence null null, father: FunctionStatement, left: StateParameterList, right: null )
( self: Statement null null, father: Sentence, left: null, right: Statement )
( self: Type null null, father: Statement, left: null, right: a )
( self: int FIELD_TYPE 3.1, father: Type, left: null, right: null )
( self: a IDENTIFIER 3.1, father: Statement, left: Type, right: null )
( self: Statement null null, father: Sentence, left: Statement, right: Statement )
( self: Type null null, father: Statement, left: null, right: b )
( self: int FIELD_TYPE 3.2, father: Type, left: null, right: null )
( self: b IDENTIFIER 3.2, father: Statement, left: Type, right: null )
( self: Statement null null, father: Sentence, left: Statement, right: Statement )
( self: Type null null, father: Statement, left: null, right: c )
( self: int FIELD_TYPE 3.3, father: Type, left: null, right: null )
( self: c IDENTIFIER 3.3, father: Statement, left: Type, right: null )
( self: Statement null null, father: Sentence, left: Statement, right: FunctionCall )
( self: Type null null, father: Statement, left: null, right: d )
( self: int FIELD_TYPE 3.4, father: Type, left: null, right: null )
( self: d IDENTIFIER 3.4, father: Statement, left: Type, right: null )
( self: FunctionCall null null, father: Sentence, left: Statement, right: Assignment )
( self: scanf FUNCTION_NAME 3.5, father: FunctionCall, left: null, right: CallParameterList )
( self: CallParameterList null null, father: FunctionCall, left: scanf, right: null )
( self: %d %d STRING_CONSTANT 3.5, father: CallParameterList, left: null, right: & )
( self: & ADDRESS 3.5, father: CallParameterList, left: %d %d, right: a )
( self: a IDENTIFIER 3.5, father: CallParameterList, left: &, right: & )
( self: & ADDRESS 3.5, father: CallParameterList, left: a, right: b )
( self: b IDENTIFIER 3.5, father: CallParameterList, left: &, right: null )
( self: Assignment null null, father: Sentence, left: FunctionCall, right: Control )
( self: c IDENTIFIER 3.6, father: Assignment, left: null, right: Expression )
( self: Expression SingleOrDoubleOperand null, father: Assignment, left: c, right: null )
( self: Expression Constant null, father: Expression, left: null, right: null )
( self: 0 _Constant 3.6, father: Expression, left: null, right: null )
( self: Control DoWhileControl 3.7, father: Sentence, left: Assignment, right: FunctionCall )
( self: Sentence null null, father: Control, left: null, right: Expression )
( self: Control IfElseControl null, father: Sentence, left: null, right: Assignment )
( self: IfControl null 3.7.1, father: Control, left: null, right: null )
( self: Expression SingleOrDoubleOperand null, father: IfControl, left: null, right: Sentence )
( self: Expression Variable null, father: Expression, left: null, right: Expression )
( self: a _Variable 3.7.1, father: Expression, left: null, right: null )
( self: Expression Constant null, father: Expression, left: Expression, right: Operator )
( self: 2 _Constant 3.7.1, father: Expression, left: null, right: null )
( self: Operator Operator null, father: Expression, left: Expression, right: Expression )
( self: % _Operator 3.7.1, father: Operator, left: null, right: null )
( self: Expression Constant null, father: Expression, left: Operator, right: Operator )
( self: 0 _Constant 3.7.1, father: Expression, left: null, right: null )
( self: Operator Operator null, father: Expression, left: Expression, right: null )
( self: == _Operator 3.7.1, father: Operator, left: null, right: null )
( self: Sentence null null, father: IfControl, left: Expression, right: null )
( self: Assignment null null, father: Sentence, left: null, right: null )
( self: c IDENTIFIER 3.7.1.1, father: Assignment, left: null, right: Expression )
( self: Expression SingleOrDoubleOperand null, father: Assignment, left: c, right: null )
( self: Expression Variable null, father: Expression, left: null, right: Expression )
( self: c _Variable 3.7.1.1, father: Expression, left: null, right: null )
( self: Expression Variable null, father: Expression, left: Expression, right: Expression )
( self: a _Variable 3.7.1.1, father: Expression, left: null, right: null )
( self: Expression Constant null, father: Expression, left: Expression, right: Operator )
( self: 2 _Constant 3.7.1.1, father: Expression, left: null, right: null )
( self: Operator Operator null, father: Expression, left: Expression, right: Operator )
( self: * _Operator 3.7.1.1, father: Operator, left: null, right: null )
( self: Operator Operator null, father: Expression, left: Operator, right: null )
( self: - _Operator 3.7.1.1, father: Operator, left: null, right: null )
( self: Assignment null null, father: Sentence, left: Control, right: Expression )
( self: c IDENTIFIER 3.7.3, father: Assignment, left: null, right: Expression )
( self: Expression SingleOrDoubleOperand null, father: Assignment, left: c, right: null )
( self: Expression Variable null, father: Expression, left: null, right: Expression )
( self: c _Variable 3.7.3, father: Expression, left: null, right: null )
( self: Expression Variable null, father: Expression, left: Expression, right: Expression )
( self: a _Variable 3.7.3, father: Expression, left: null, right: null )
( self: Expression Constant null, father: Expression, left: Expression, right: Operator )
( self: 2 _Constant 3.7.3, father: Expression, left: null, right: null )
( self: Operator Operator null, father: Expression, left: Expression, right: Operator )
( self: * _Operator 3.7.3, father: Operator, left: null, right: null )
( self: Operator Operator null, father: Expression, left: Operator, right: null )
( self: + _Operator 3.7.3, father: Operator, left: null, right: null )
( self: Expression SingleOrDoubleOperand null, father: Sentence, left: Assignment, right: null )
( self: Expression Variable null, father: Expression, left: null, right: Operator )
( self: a _Variable 3.7.4, father: Expression, left: null, right: null )
( self: Operator Operator null, father: Expression, left: Expression, right: null )
( self: ++ _Operator 3.7.4, father: Operator, left: null, right: null )
( self: Expression SingleOrDoubleOperand null, father: Control, left: Sentence, right: null )
( self: Expression Variable null, father: Expression, left: null, right: Expression )
( self: a _Variable 3.8, father: Expression, left: null, right: null )
( self: Expression Variable null, father: Expression, left: Expression, right: Operator )
( self: b _Variable 3.8, father: Expression, left: null, right: null )
( self: Operator Operator null, father: Expression, left: Expression, right: null )
( self: < _Operator 3.8, father: Operator, left: null, right: null )
( self: FunctionCall null null, father: Sentence, left: Control, right: FunctionCall )
( self: printf FUNCTION_NAME 3.9, father: FunctionCall, left: null, right: CallParameterList )
( self: CallParameterList null null, father: FunctionCall, left: printf, right: null )
( self: c is %d for the first time! STRING_CONSTANT 3.9, father: CallParameterList, left: null, right: c )
( self: c IDENTIFIER 3.9, father: CallParameterList, left: c is %d for the first time!, right: null )
( self: FunctionCall null null, father: Sentence, left: FunctionCall, right: Assignment )
( self: scanf FUNCTION_NAME 3.10, father: FunctionCall, left: null, right: CallParameterList )
( self: CallParameterList null null, father: FunctionCall, left: scanf, right: null )
( self: %d STRING_CONSTANT 3.10, father: CallParameterList, left: null, right: & )
( self: & ADDRESS 3.10, father: CallParameterList, left: %d, right: a )
( self: a IDENTIFIER 3.10, father: CallParameterList, left: &, right: null )
( self: Assignment null null, father: Sentence, left: FunctionCall, right: Assignment )
( self: b IDENTIFIER 3.11, father: Assignment, left: null, right: Expression )
( self: Expression SingleOrDoubleOperand null, father: Assignment, left: b, right: null )
( self: Expression Constant null, father: Expression, left: null, right: null )
( self: 1 _Constant 3.11, father: Expression, left: null, right: null )
( self: Assignment null null, father: Sentence, left: Assignment, right: Control )
( self: c IDENTIFIER 3.12, father: Assignment, left: null, right: Expression )
( self: Expression SingleOrDoubleOperand null, father: Assignment, left: c, right: null )
( self: Expression Variable null, father: Expression, left: null, right: Expression )
( self: b _Variable 3.12, father: Expression, left: null, right: null )
( self: Expression Variable null, father: Expression, left: Expression, right: Operator )
( self: b _Variable 3.12, father: Expression, left: null, right: null )
( self: Operator Operator null, father: Expression, left: Expression, right: null )
( self: * _Operator 3.12, father: Operator, left: null, right: null )
( self: Control WhileControl 3.13, father: Sentence, left: Assignment, right: FunctionCall )
( self: Expression SingleOrDoubleOperand null, father: Control, left: null, right: Sentence )
( self: Expression Variable null, father: Expression, left: null, right: Expression )
( self: c _Variable 3.13, father: Expression, left: null, right: null )
( self: Expression Variable null, father: Expression, left: Expression, right: Operator )
( self: a _Variable 3.13, father: Expression, left: null, right: null )
( self: Operator Operator null, father: Expression, left: Expression, right: null )
( self: < _Operator 3.13, father: Operator, left: null, right: null )
( self: Sentence null null, father: Control, left: Expression, right: null )
( self: Expression SingleOrDoubleOperand null, father: Sentence, left: null, right: Assignment )
( self: Expression Variable null, father: Expression, left: null, right: Operator )
( self: b _Variable 3.13.1, father: Expression, left: null, right: null )
( self: Operator Operator null, father: Expression, left: Expression, right: null )
( self: ++ _Operator 3.13.1, father: Operator, left: null, right: null )
( self: Assignment null null, father: Sentence, left: Expression, right: null )
( self: c IDENTIFIER 3.13.2, father: Assignment, left: null, right: Expression )
( self: Expression SingleOrDoubleOperand null, father: Assignment, left: c, right: null )
( self: Expression Variable null, father: Expression, left: null, right: Expression )
( self: b _Variable 3.13.2, father: Expression, left: null, right: null )
( self: Expression Variable null, father: Expression, left: Expression, right: Operator )
( self: b _Variable 3.13.2, father: Expression, left: null, right: null )
( self: Operator Operator null, father: Expression, left: Expression, right: null )
( self: * _Operator 3.13.2, father: Operator, left: null, right: null )
( self: FunctionCall null null, father: Sentence, left: Control, right: Return )
( self: printf FUNCTION_NAME 3.15, father: FunctionCall, left: null, right: CallParameterList )
( self: CallParameterList null null, father: FunctionCall, left: printf, right: null )
( self: The biggest sqrt root of %d is %d STRING_CONSTANT 3.15, father: CallParameterList, left: null, right: a )
( self: a IDENTIFIER 3.15, father: CallParameterList, left: The biggest sqrt root of %d is %d, right: b )
( self: b IDENTIFIER 3.15, father: CallParameterList, left: a, right: null )
( self: Return null null, father: Sentence, left: FunctionCall, right: null )
( self: return RETURN 3.16, father: Return, left: null, right: Expression )
( self: Expression SingleOrDoubleOperand null, father: Return, left: return, right: null )
( self: Expression Constant null, father: Expression, left: null, right: null )
( self: 0 _Constant 3.16, father: Expression, left: null, right: null )

目标码生成开始...
if语句验证开始...
待证 : if
==============目标码模式===============
<LOG-EXP>
cmpi 7,0,0,0
beq 7,.L1
<STA-LIST>
.L1:

==============目标码模式命题===============
GPR[0] = <LOG-EXP>

GPR[0] < 0 -> CR[7] = b100
GPR[0] > 0 -> CR[7] = b010
GPR[0] == 0 -> CR[7] = b001

CR[7] == b100 -> PC = PC + 4
CR[7] == b010 -> PC = PC + 4
CR[7] == b001 -> PC = PC + @.L1

<STA-LIST>

.L1:

==============命题推理结果===============
<LOG-EXP> < 0 -> PC = PC + 4
<LOG-EXP> > 0 -> PC = PC + 4
<LOG-EXP> == 0 -> PC = PC + @.L1

<STA-LIST>

.L1:

=============推理出的语义================
<LOG-EXP> != 0 -> <STA-LIST>
<LOG-EXP> == 0 -> null

σ-transfer :
<LOG-EXP> != 0 -> σ(<STA-LIST>)
<LOG-EXP> == 0 -> skip

=============给定的目标语义================
<LOG-EXP> != 0 -> σ(<STA-LIST>)
<LOG-EXP> == 0 -> skip

===============结论================
给定的目标语义和推理出的语义是否一致 : 
true
if语句验证结果 : 验证成功
if语句验证结束!

do-while语句验证开始...
待证 : do_while
==============目标码模式===============
.L1:
<STA-LIST>
<LOG-EXP>
cmpi 7,0,0,0
bne 7,.L1

==============目标码模式命题===============
.L1:

<STA-LIST>

GPR[0] = <LOG-EXP>

GPR[0] < 0 -> CR[7] = b100
GPR[0] > 0 -> CR[7] = b010
GPR[0] == 0 -> CR[7] = b001

CR[7] == b100 -> PC = PC + @.L1
CR[7] == b010 -> PC = PC + @.L1
CR[7] == b001 -> PC = PC + 4

=================循环交互证明算法===================
用户输入的语义 :
σ(<STA-LIST>)

{<LOG-EXP> != 0 -> σ(<STA-LIST>)} ** n
<LOG-EXP> == 0 -> skip

(1) n == 1
目标语义取 n = 1 :
σ(<STA-LIST>)

<LOG-EXP> != 0 -> σ(<STA-LIST>)
<LOG-EXP> == 0 -> skip

推理出的语义为 :
<STA-LIST>

<LOG-EXP> != 0 -> <STA-LIST>
<LOG-EXP> == 0 -> null

σ-transfer :
σ(<STA-LIST>)

<LOG-EXP> != 0 -> σ(<STA-LIST>)
<LOG-EXP> == 0 -> skip

结论 :
n = 1时, 目标语义和推理出的语义一致

(2) n = N
假设成立 :
σ(<STA-LIST>)

{<LOG-EXP> != 0 -> σ(<STA-LIST>)} ** N
<LOG-EXP> == 0 -> skip

(3) n = N + 1
目标语义 :
σ(<STA-LIST>)

{<LOG-EXP> != 0 -> σ(<STA-LIST>)} ** (N + 1)
<LOG-EXP> == 0 -> skip

合并推理出的 n = 1 和 假设的 n = N 的语义 :
σ(<STA-LIST>)

{<LOG-EXP> != 0 -> σ(<STA-LIST>)} ** (N + 1)
<LOG-EXP> == 0 -> skip

结论 :
n = N + 1时, 目标语义和推理出的语义一致

综上，给定的目标语义和推理出的语义是否一致 :
true
do-while语句验证结果 : 验证成功
do-while语句验证结束!

while语句验证开始...
待证 : while
==============目标码模式===============
b .L2
.L1:
<STA-LIST>
.L2:
<LOG-EXP>
cmpi 7,0,0,0
bne 7,.L1

==============目标码模式命题===============
PC = PC + @.L2

.L1:

<STA-LIST>

.L2:

GPR[0] = <LOG-EXP>

GPR[0] < 0 -> CR[7] = b100
GPR[0] > 0 -> CR[7] = b010
GPR[0] == 0 -> CR[7] = b001

CR[7] == b100 -> PC = PC + @.L1
CR[7] == b010 -> PC = PC + @.L1
CR[7] == b001 -> PC = PC + 4

=================循环交互证明算法===================
用户输入的语义 :
{<LOG-EXP> != 0 -> σ(<STA-LIST>)} ** n
<LOG-EXP> == 0 -> skip

(1) n == 1
目标语义取 n = 1 :
<LOG-EXP> != 0 -> σ(<STA-LIST>)
<LOG-EXP> == 0 -> skip

推理出的语义为 :
<LOG-EXP> != 0 -> <STA-LIST>
<LOG-EXP> == 0 -> null

σ-transfer :
<LOG-EXP> != 0 -> σ(<STA-LIST>)
<LOG-EXP> == 0 -> skip

结论 :
n = 1时, 目标语义和推理出的语义一致

(2) n = N
假设成立 :
{<LOG-EXP> != 0 -> σ(<STA-LIST>)} ** N
<LOG-EXP> == 0 -> skip

(3) n = N + 1
目标语义 :
{<LOG-EXP> != 0 -> σ(<STA-LIST>)} ** (N + 1)
<LOG-EXP> == 0 -> skip

合并推理出的 n = 1 和 假设的 n = N 的语义 :
{<LOG-EXP> != 0 -> σ(<STA-LIST>)} ** (N + 1)
<LOG-EXP> == 0 -> skip

结论 :
n = N + 1时, 目标语义和推理出的语义一致

综上，给定的目标语义和推理出的语义是否一致 :
true
while语句验证结果 : 验证成功
while语句验证结束!

目标码生成结束!
===================Assembler==================
	.section .rodata
	.align 2                               # 3.5
.LC0:	                                  # 3.5
	.string	"%d %d"                        # 3.5
	.align 2                               # 3.9
.LC4:	                                  # 3.9
	.string	"c is %d for the first time!"  # 3.9
	.align 2                               # 3.10
.LC5:	                                  # 3.10
	.string	"%d"                           # 3.10

	.align 2                               # 3.15
.LC8:	                                  # 3.15
	.string	"The biggest sqrt root of %d is %d"# 3.15

	.section ".text"
	.align 2                               # 3
	.globl main                            # 3
	.type main, @function                  # 3
main:	                                  # 3
	stwu 1,-16(1)                          # 3
	stw 31,12(1)                           # 3
	mr 31,1                                # 3

	lis 0,.LC0@ha                          # 3.5
	addic 10,0,.LC0@l                      # 3.5
	mr 3,10                                # 3.5
	addi 11,31,8                           # 3.5
	mr 4,11                                # 3.5
	addi 12,31,12                          # 3.5
	mr 5,12                                # 3.5
	crxor 6,6,6                            # 3.5
	bl __isoc99_scanf                      # 3.5

	li 0,0                                 # 3.6
	stw 0,16(31)                           # 3.6

.L1:	                                   # 3.7
	lwz 0,8(31)                            # 3.7.1
	li 9,2                                 # 3.7.1
	divw 11,0,9                            # 3.7.1
	mullw 9,11,9                           # 3.7.1
	subf 0,9,0                             # 3.7.1
	stw 0,24(31)                           # 3.7.1

	lwz 0,24(31)
	li 9,0                                 # 3.7.1
	cmp 7,0,0,9                            # 3.7.1
	li 0,0                                 # 3.7.1
	li 9,1                                 # 3.7.1
	isel 0,9,0,30                          # 3.7.1
	stw 0,28(31)                           # 3.7.1

	lwz 0,28(31)                           # 3.7.1
	cmpi 7,0,0,0                           # 3.7.1
	beq 7,.L2                              # 3.7.1

	lwz 9,8(31)                            # 3.7.1.1
	li 0,2                                 # 3.7.1.1
	mullw 0,9,0                            # 3.7.1.1
	stw 0,24(31)                           # 3.7.1.1

	lwz 9,16(31)                           # 3.7.1.1
	lwz 0,24(31)
	subf 0,9,0                             # 3.7.1.1
	stw 0,28(31)                           # 3.7.1.1

	lwz 0,28(31)                           # 3.7.1.1
	stw 0,16(31)                           # 3.7.1.1

.L2:	                                   # 3.7.1

	lwz 9,8(31)                            # 3.7.3
	li 0,2                                 # 3.7.3
	mullw 0,9,0                            # 3.7.3
	stw 0,24(31)                           # 3.7.3

	lwz 9,16(31)                           # 3.7.3
	lwz 0,24(31)
	add 0,9,0                              # 3.7.3
	stw 0,28(31)                           # 3.7.3

	lwz 0,28(31)                           # 3.7.3
	stw 0,16(31)                           # 3.7.3

	lwz 0,8(31)                            # 3.7.4
	addic 0,0,1                            # 3.7.4
	stw 0,8(31)                            # 3.7.4

	lwz 0,8(31)                            # 3.8
	lwz 9,12(31)                           # 3.8
	cmp 7,0,0,9                            # 3.8
	li 0,0                                 # 3.8
	li 9,1                                 # 3.8
	isel 0,9,0,28                          # 3.8
	stw 0,24(31)                           # 3.8

	lwz 0,24(31)                           # 3.7
	cmpi 7,0,0,0                           # 3.7
	bne 7,.L1                              # 3.7

	lis 0,.LC4@ha                          # 3.9
	addic 0,0,.LC4@l                       # 3.9
	mr 3,0                                 # 3.9
	lwz 4,16(31)                           # 3.9
	crxor 6,6,6                            # 3.9
	bl printf                              # 3.9

	lis 0,.LC5@ha                          # 3.10
	addic 10,0,.LC5@l                      # 3.10
	mr 3,10                                # 3.10
	addi 11,31,8                           # 3.10
	mr 4,11                                # 3.10
	crxor 6,6,6                            # 3.10
	bl __isoc99_scanf                      # 3.10

	li 0,1                                 # 3.11
	stw 0,12(31)                           # 3.11

	lwz 9,12(31)                           # 3.12
	lwz 0,12(31)                           # 3.12
	mullw 0,9,0                            # 3.12
	stw 0,24(31)                           # 3.12

	lwz 0,24(31)                           # 3.12
	stw 0,16(31)                           # 3.12

	b .L6                                  # 3.13
.L7:	                                   # 3.13
	lwz 0,12(31)                           # 3.13.1
	addic 0,0,1                            # 3.13.1
	stw 0,12(31)                           # 3.13.1

	lwz 9,12(31)                           # 3.13.2
	lwz 0,12(31)                           # 3.13.2
	mullw 0,9,0                            # 3.13.2
	stw 0,24(31)                           # 3.13.2

	lwz 0,24(31)                           # 3.13.2
	stw 0,16(31)                           # 3.13.2

.L6:	                                   # 3.13
	lwz 0,16(31)                           # 3.13
	lwz 9,8(31)                            # 3.13
	cmp 7,0,0,9                            # 3.13
	li 0,0                                 # 3.13
	li 9,1                                 # 3.13
	isel 0,9,0,28                          # 3.13
	stw 0,24(31)                           # 3.13

	lwz 0,24(31)                           # 3.13
	cmpi 7,0,0,0                           # 3.13
	bne 7,.L7                              # 3.13
	lis 0,.LC8@ha                          # 3.15
	addic 0,0,.LC8@l                       # 3.15
	mr 3,0                                 # 3.15
	lwz 4,8(31)                            # 3.15
	lwz 5,12(31)                           # 3.15
	crxor 6,6,6                            # 3.15
	bl printf                              # 3.15

	li 0,0                                 # 3.16
	mr 3,0                                 # 3.16
	addi 11,31,16                          # 3
	lwz 31,-4(11)                          # 3
	mr 1,11                                # 3
	blr                                    # 3
	.size main,.-main                      # 3
