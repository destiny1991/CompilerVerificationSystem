预处理源代码开始...
预处理源代码结束
====================Source C Code==================
#include <stdio.h>

int main() {
    int n;
    int i;
    int sum;
    int tmp;

    scanf("%d", &n);    
    sum = 0;

    for(i = 1; i <= n; i++) { 
        tmp = i % 2;
        if(tmp == 0) {
            sum = sum + i;
        } else {
            sum = sum - i * 2;
        
        } 
    }   

    i = !n;
    i = ~n;

    printf("sum is %d", sum);

    return 0;
}

源代码标号开始...
源代码编号结束!
====================Labeled C Code==================
#include <stdio.h>                                // 1

int main() {                                      // 2
    int n;                                        // 2.1
    int i;                                        // 2.2
    int sum;                                      // 2.3
    int tmp;                                      // 2.4

    scanf("%d", &n);                              // 2.5
    sum = 0;                                      // 2.6

    for(i = 1; i <= n; i++) {                     // 2.7
        tmp = i % 2;                              // 2.7.1
        if(tmp == 0) {                            // 2.7.2
            sum = sum + i;                        // 2.7.2.1
        } else {                                  // 2.7.3
            sum = sum - i * 2;                    // 2.7.3.1
        
        }                                         // 2.7.4
    }                                             // 2.8

    i = !n;                                       // 2.9
    i = ~n;                                       // 2.10

    printf("sum is %d", sum);                     // 2.11

    return 0;                                     // 2.12
}                                                 // 3

词法分析开始...
词法分析结束!
====================Lexer==================
(#, SHARP, 1)
(include, INCLUDE, 1)
(<, LT, 1)
(stdio.h, IDENTIFIER, 1)
(>, GT, 1)
(int, INT, 2)
(main, IDENTIFIER, 2)
((, LL_BRACKET, 2)
(), RL_BRACKET, 2)
({, LB_BRACKET, 2)
(int, INT, 2.1)
(n, IDENTIFIER, 2.1)
(;, SEMICOLON, 2.1)
(int, INT, 2.2)
(i, IDENTIFIER, 2.2)
(;, SEMICOLON, 2.2)
(int, INT, 2.3)
(sum, IDENTIFIER, 2.3)
(;, SEMICOLON, 2.3)
(int, INT, 2.4)
(tmp, IDENTIFIER, 2.4)
(;, SEMICOLON, 2.4)
(scanf, IDENTIFIER, 2.5)
((, LL_BRACKET, 2.5)
(", DOUBLE_QUOTE, 2.5)
(%d, STRING_CONSTANT, 2.5)
(", DOUBLE_QUOTE, 2.5)
(,, COMMA, 2.5)
(&, BIT_AND, 2.5)
(n, IDENTIFIER, 2.5)
(), RL_BRACKET, 2.5)
(;, SEMICOLON, 2.5)
(sum, IDENTIFIER, 2.6)
(=, ASSIGN, 2.6)
(0, DIGIT_CONSTANT, 2.6)
(;, SEMICOLON, 2.6)
(for, FOR, 2.7)
((, LL_BRACKET, 2.7)
(i, IDENTIFIER, 2.7)
(=, ASSIGN, 2.7)
(1, DIGIT_CONSTANT, 2.7)
(;, SEMICOLON, 2.7)
(i, IDENTIFIER, 2.7)
(<=, LET, 2.7)
(n, IDENTIFIER, 2.7)
(;, SEMICOLON, 2.7)
(i, IDENTIFIER, 2.7)
(++, SELF_PLUS, 2.7)
(), RL_BRACKET, 2.7)
({, LB_BRACKET, 2.7)
(tmp, IDENTIFIER, 2.7.1)
(=, ASSIGN, 2.7.1)
(i, IDENTIFIER, 2.7.1)
(%, MOD, 2.7.1)
(2, DIGIT_CONSTANT, 2.7.1)
(;, SEMICOLON, 2.7.1)
(if, IF, 2.7.2)
((, LL_BRACKET, 2.7.2)
(tmp, IDENTIFIER, 2.7.2)
(==, EQU, 2.7.2)
(0, DIGIT_CONSTANT, 2.7.2)
(), RL_BRACKET, 2.7.2)
({, LB_BRACKET, 2.7.2)
(sum, IDENTIFIER, 2.7.2.1)
(=, ASSIGN, 2.7.2.1)
(sum, IDENTIFIER, 2.7.2.1)
(+, PLUS, 2.7.2.1)
(i, IDENTIFIER, 2.7.2.1)
(;, SEMICOLON, 2.7.2.1)
(}, RB_BRACKET, 2.7.3)
(else, ELSE, 2.7.3)
({, LB_BRACKET, 2.7.3)
(sum, IDENTIFIER, 2.7.3.1)
(=, ASSIGN, 2.7.3.1)
(sum, IDENTIFIER, 2.7.3.1)
(-, MINUS, 2.7.3.1)
(i, IDENTIFIER, 2.7.3.1)
(*, MUL, 2.7.3.1)
(2, DIGIT_CONSTANT, 2.7.3.1)
(;, SEMICOLON, 2.7.3.1)
(}, RB_BRACKET, 2.7.4)
(}, RB_BRACKET, 2.8)
(i, IDENTIFIER, 2.9)
(=, ASSIGN, 2.9)
(!, NOT, 2.9)
(n, IDENTIFIER, 2.9)
(;, SEMICOLON, 2.9)
(i, IDENTIFIER, 2.10)
(=, ASSIGN, 2.10)
(~, BIT_NOT, 2.10)
(n, IDENTIFIER, 2.10)
(;, SEMICOLON, 2.10)
(printf, IDENTIFIER, 2.11)
((, LL_BRACKET, 2.11)
(", DOUBLE_QUOTE, 2.11)
(sum is %d, STRING_CONSTANT, 2.11)
(", DOUBLE_QUOTE, 2.11)
(,, COMMA, 2.11)
(sum, IDENTIFIER, 2.11)
(), RL_BRACKET, 2.11)
(;, SEMICOLON, 2.11)
(return, RETURN, 2.12)
(0, DIGIT_CONSTANT, 2.12)
(;, SEMICOLON, 2.12)
(}, RB_BRACKET, 3)

语法分析开始...
  include语句 : 语法合法
  变量声明语句 : 语法合法
  变量声明语句 : 语法合法
  变量声明语句 : 语法合法
  变量声明语句 : 语法合法
  函数调用语句 : 语法合法
  表达式语句 : 语法合法
  赋值语句 : 语法合法
  表达式语句 : 语法合法
  赋值语句 : 语法合法
  表达式语句 : 语法合法
  表达式语句 : 语法合法
  表达式语句 : 语法合法
  赋值语句 : 语法合法
  表达式语句 : 语法合法
  表达式语句 : 语法合法
  赋值语句 : 语法合法
  表达式语句 : 语法合法
  赋值语句 : 语法合法
  if-else语句 : 语法合法
  for语句 : 语法合法
  表达式语句 : 语法合法
  赋值语句 : 语法合法
  表达式语句 : 语法合法
  赋值语句 : 语法合法
  函数调用语句 : 语法合法
  表达式语句 : 语法合法
  return语句 : 语法合法
  函数定义 : 语法合法
语法分析结束!
====================Parser==================
( self: Sentence null null, father: null, left: null, right: null )
( self: Include null null, father: Sentence, left: null, right: FunctionStatement )
( self: # SHARP 1, father: Include, left: null, right: include )
( self: include INCLUDE 1, father: Include, left: #, right: < )
( self: < LT 1, father: Include, left: include, right: stdio.h )
( self: stdio.h IDENTIFIER 1, father: Include, left: <, right: > )
( self: > GT 1, father: Include, left: stdio.h, right: null )
( self: FunctionStatement null null, father: Sentence, left: Include, right: null )
( self: Type null null, father: FunctionStatement, left: null, right: FunctionName )
( self: int FIELD_TYPE 2, father: Type, left: null, right: null )
( self: FunctionName null null, father: FunctionStatement, left: Type, right: StateParameterList )
( self: main IDENTIFIER 2, father: FunctionName, left: null, right: null )
( self: StateParameterList null null, father: FunctionStatement, left: FunctionName, right: Sentence )
( self: Sentence null null, father: FunctionStatement, left: StateParameterList, right: null )
( self: Statement null null, father: Sentence, left: null, right: Statement )
( self: Type null null, father: Statement, left: null, right: n )
( self: int FIELD_TYPE 2.1, father: Type, left: null, right: null )
( self: n IDENTIFIER 2.1, father: Statement, left: Type, right: null )
( self: Statement null null, father: Sentence, left: Statement, right: Statement )
( self: Type null null, father: Statement, left: null, right: i )
( self: int FIELD_TYPE 2.2, father: Type, left: null, right: null )
( self: i IDENTIFIER 2.2, father: Statement, left: Type, right: null )
( self: Statement null null, father: Sentence, left: Statement, right: Statement )
( self: Type null null, father: Statement, left: null, right: sum )
( self: int FIELD_TYPE 2.3, father: Type, left: null, right: null )
( self: sum IDENTIFIER 2.3, father: Statement, left: Type, right: null )
( self: Statement null null, father: Sentence, left: Statement, right: FunctionCall )
( self: Type null null, father: Statement, left: null, right: tmp )
( self: int FIELD_TYPE 2.4, father: Type, left: null, right: null )
( self: tmp IDENTIFIER 2.4, father: Statement, left: Type, right: null )
( self: FunctionCall null null, father: Sentence, left: Statement, right: Assignment )
( self: scanf FUNCTION_NAME 2.5, father: FunctionCall, left: null, right: CallParameterList )
( self: CallParameterList null null, father: FunctionCall, left: scanf, right: null )
( self: %d STRING_CONSTANT 2.5, father: CallParameterList, left: null, right: & )
( self: & ADDRESS 2.5, father: CallParameterList, left: %d, right: n )
( self: n IDENTIFIER 2.5, father: CallParameterList, left: &, right: null )
( self: Assignment null null, father: Sentence, left: FunctionCall, right: Control )
( self: sum IDENTIFIER 2.6, father: Assignment, left: null, right: Expression )
( self: Expression SingleOrDoubleOperand null, father: Assignment, left: sum, right: null )
( self: Expression Constant null, father: Expression, left: null, right: null )
( self: 0 _Constant 2.6, father: Expression, left: null, right: null )
( self: Control ForControl 2.7, father: Sentence, left: Assignment, right: Assignment )
( self: Assignment null null, father: Control, left: null, right: Expression )
( self: i IDENTIFIER 2.7, father: Assignment, left: null, right: Expression )
( self: Expression SingleOrDoubleOperand null, father: Assignment, left: i, right: null )
( self: Expression Constant null, father: Expression, left: null, right: null )
( self: 1 _Constant 2.7, father: Expression, left: null, right: null )
( self: Expression SingleOrDoubleOperand null, father: Control, left: Assignment, right: Sentence )
( self: Expression Variable null, father: Expression, left: null, right: Expression )
( self: i _Variable 2.7, father: Expression, left: null, right: null )
( self: Expression Variable null, father: Expression, left: Expression, right: Operator )
( self: n _Variable 2.7, father: Expression, left: null, right: null )
( self: Operator Operator null, father: Expression, left: Expression, right: null )
( self: <= _Operator 2.7, father: Operator, left: null, right: null )
( self: Sentence null null, father: Control, left: Expression, right: Expression )
( self: Assignment null null, father: Sentence, left: null, right: Control )
( self: tmp IDENTIFIER 2.7.1, father: Assignment, left: null, right: Expression )
( self: Expression SingleOrDoubleOperand null, father: Assignment, left: tmp, right: null )
( self: Expression Variable null, father: Expression, left: null, right: Expression )
( self: i _Variable 2.7.1, father: Expression, left: null, right: null )
( self: Expression Constant null, father: Expression, left: Expression, right: Operator )
( self: 2 _Constant 2.7.1, father: Expression, left: null, right: null )
( self: Operator Operator null, father: Expression, left: Expression, right: null )
( self: % _Operator 2.7.1, father: Operator, left: null, right: null )
( self: Control IfElseControl null, father: Sentence, left: Assignment, right: null )
( self: IfControl null 2.7.2, father: Control, left: null, right: ElseControl )
( self: Expression SingleOrDoubleOperand null, father: IfControl, left: null, right: Sentence )
( self: Expression Variable null, father: Expression, left: null, right: Expression )
( self: tmp _Variable 2.7.2, father: Expression, left: null, right: null )
( self: Expression Constant null, father: Expression, left: Expression, right: Operator )
( self: 0 _Constant 2.7.2, father: Expression, left: null, right: null )
( self: Operator Operator null, father: Expression, left: Expression, right: null )
( self: == _Operator 2.7.2, father: Operator, left: null, right: null )
( self: Sentence null null, father: IfControl, left: Expression, right: null )
( self: Assignment null null, father: Sentence, left: null, right: null )
( self: sum IDENTIFIER 2.7.2.1, father: Assignment, left: null, right: Expression )
( self: Expression SingleOrDoubleOperand null, father: Assignment, left: sum, right: null )
( self: Expression Variable null, father: Expression, left: null, right: Expression )
( self: sum _Variable 2.7.2.1, father: Expression, left: null, right: null )
( self: Expression Variable null, father: Expression, left: Expression, right: Operator )
( self: i _Variable 2.7.2.1, father: Expression, left: null, right: null )
( self: Operator Operator null, father: Expression, left: Expression, right: null )
( self: + _Operator 2.7.2.1, father: Operator, left: null, right: null )
( self: ElseControl null 2.7.3, father: Control, left: IfControl, right: null )
( self: Sentence null null, father: ElseControl, left: null, right: null )
( self: Assignment null null, father: Sentence, left: null, right: null )
( self: sum IDENTIFIER 2.7.3.1, father: Assignment, left: null, right: Expression )
( self: Expression SingleOrDoubleOperand null, father: Assignment, left: sum, right: null )
( self: Expression Variable null, father: Expression, left: null, right: Expression )
( self: sum _Variable 2.7.3.1, father: Expression, left: null, right: null )
( self: Expression Variable null, father: Expression, left: Expression, right: Expression )
( self: i _Variable 2.7.3.1, father: Expression, left: null, right: null )
( self: Expression Constant null, father: Expression, left: Expression, right: Operator )
( self: 2 _Constant 2.7.3.1, father: Expression, left: null, right: null )
( self: Operator Operator null, father: Expression, left: Expression, right: Operator )
( self: * _Operator 2.7.3.1, father: Operator, left: null, right: null )
( self: Operator Operator null, father: Expression, left: Operator, right: null )
( self: - _Operator 2.7.3.1, father: Operator, left: null, right: null )
( self: Expression SingleOrDoubleOperand null, father: Control, left: Sentence, right: null )
( self: Expression Variable null, father: Expression, left: null, right: Operator )
( self: i _Variable 2.7, father: Expression, left: null, right: null )
( self: Operator Operator null, father: Expression, left: Expression, right: null )
( self: ++ _Operator 2.7, father: Operator, left: null, right: null )
( self: Assignment null null, father: Sentence, left: Control, right: Assignment )
( self: i IDENTIFIER 2.9, father: Assignment, left: null, right: Expression )
( self: Expression SingleOrDoubleOperand null, father: Assignment, left: i, right: null )
( self: Expression Variable null, father: Expression, left: null, right: Operator )
( self: n _Variable 2.9, father: Expression, left: null, right: null )
( self: Operator Operator null, father: Expression, left: Expression, right: null )
( self: ! _Operator 2.9, father: Operator, left: null, right: null )
( self: Assignment null null, father: Sentence, left: Assignment, right: FunctionCall )
( self: i IDENTIFIER 2.10, father: Assignment, left: null, right: Expression )
( self: Expression SingleOrDoubleOperand null, father: Assignment, left: i, right: null )
( self: Expression Variable null, father: Expression, left: null, right: Operator )
( self: n _Variable 2.10, father: Expression, left: null, right: null )
( self: Operator Operator null, father: Expression, left: Expression, right: null )
( self: ~ _Operator 2.10, father: Operator, left: null, right: null )
( self: FunctionCall null null, father: Sentence, left: Assignment, right: Return )
( self: printf FUNCTION_NAME 2.11, father: FunctionCall, left: null, right: CallParameterList )
( self: CallParameterList null null, father: FunctionCall, left: printf, right: null )
( self: sum is %d STRING_CONSTANT 2.11, father: CallParameterList, left: null, right: sum )
( self: sum IDENTIFIER 2.11, father: CallParameterList, left: sum is %d, right: null )
( self: Return null null, father: Sentence, left: FunctionCall, right: null )
( self: return RETURN 2.12, father: Return, left: null, right: Expression )
( self: Expression SingleOrDoubleOperand null, father: Return, left: return, right: null )
( self: Expression Constant null, father: Expression, left: null, right: null )
( self: 0 _Constant 2.12, father: Expression, left: null, right: null )

