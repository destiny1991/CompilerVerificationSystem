预处理源代码开始...(test3.c)
预处理源代码结束
词法分析开始...
词法分析结束!
====================Source C Code==================
#include <stdio.h>

int main() {
    short a;
    short b;
    short c;
    short d;

    scanf("%hd %hd %hd %hd", &a, &b, &c, &d);


    a = 34 + b;
    c = a + b;
    a = 12 + 12;
    
    printf("%hd", a);
    printf("%hd", b + 23);


    return 0;
}

====================Labeled C Code==================
#include <stdio.h>                                // 1

int main() {                                      // 2
    short a;                                      // 2.1
    short b;                                      // 2.2
    short c;                                      // 2.3
    short d;                                      // 2.4

    scanf("%hd %hd %hd %hd", &a, &b, &c, &d);     // 2.5


    a = 34 + b;                                   // 2.6
    c = a + b;                                    // 2.7
    a = 12 + 12;                                  // 2.8
    
    printf("%hd", a);                             // 2.9
    printf("%hd", b + 23);                        // 2.10


    return 0;                                     // 2.11
}                                                 // 3

====================Lexer==================
(#, SHARP, 1)
(include, INCLUDE, 1)
(<, LT, 1)
(stdio.h, IDENTIFIER, 1)
(>, GT, 1)
(int, INT, 2)
(main, IDENTIFIER, 2)
((, LL_BRACKET, 2)
(), RL_BRACKET, 2)
({, LB_BRACKET, 2)
(short, SHORT, 2.1)
(a, IDENTIFIER, 2.1)
(;, SEMICOLON, 2.1)
(short, SHORT, 2.2)
(b, IDENTIFIER, 2.2)
(;, SEMICOLON, 2.2)
(short, SHORT, 2.3)
(c, IDENTIFIER, 2.3)
(;, SEMICOLON, 2.3)
(short, SHORT, 2.4)
(d, IDENTIFIER, 2.4)
(;, SEMICOLON, 2.4)
(scanf, IDENTIFIER, 2.5)
((, LL_BRACKET, 2.5)
(", DOUBLE_QUOTE, 2.5)
(%hd %hd %hd %hd, STRING_CONSTANT, 2.5)
(", DOUBLE_QUOTE, 2.5)
(,, COMMA, 2.5)
(&, BIT_AND, 2.5)
(a, IDENTIFIER, 2.5)
(,, COMMA, 2.5)
(&, BIT_AND, 2.5)
(b, IDENTIFIER, 2.5)
(,, COMMA, 2.5)
(&, BIT_AND, 2.5)
(c, IDENTIFIER, 2.5)
(,, COMMA, 2.5)
(&, BIT_AND, 2.5)
(d, IDENTIFIER, 2.5)
(), RL_BRACKET, 2.5)
(;, SEMICOLON, 2.5)
(a, IDENTIFIER, 2.6)
(=, ASSIGN, 2.6)
(34, DIGIT_CONSTANT, 2.6)
(+, PLUS, 2.6)
(b, IDENTIFIER, 2.6)
(;, SEMICOLON, 2.6)
(c, IDENTIFIER, 2.7)
(=, ASSIGN, 2.7)
(a, IDENTIFIER, 2.7)
(+, PLUS, 2.7)
(b, IDENTIFIER, 2.7)
(;, SEMICOLON, 2.7)
(a, IDENTIFIER, 2.8)
(=, ASSIGN, 2.8)
(12, DIGIT_CONSTANT, 2.8)
(+, PLUS, 2.8)
(12, DIGIT_CONSTANT, 2.8)
(;, SEMICOLON, 2.8)
(printf, IDENTIFIER, 2.9)
((, LL_BRACKET, 2.9)
(", DOUBLE_QUOTE, 2.9)
(%hd, STRING_CONSTANT, 2.9)
(", DOUBLE_QUOTE, 2.9)
(,, COMMA, 2.9)
(a, IDENTIFIER, 2.9)
(), RL_BRACKET, 2.9)
(;, SEMICOLON, 2.9)
(printf, IDENTIFIER, 2.10)
((, LL_BRACKET, 2.10)
(", DOUBLE_QUOTE, 2.10)
(%hd, STRING_CONSTANT, 2.10)
(", DOUBLE_QUOTE, 2.10)
(,, COMMA, 2.10)
(b, IDENTIFIER, 2.10)
(+, PLUS, 2.10)
(23, DIGIT_CONSTANT, 2.10)
(), RL_BRACKET, 2.10)
(;, SEMICOLON, 2.10)
(return, RETURN, 2.11)
(0, DIGIT_CONSTANT, 2.11)
(;, SEMICOLON, 2.11)
(}, RB_BRACKET, 3)

文法单元识别开始...
  include语句 : 语法合法
  变量声明语句 : 语法合法
  变量声明语句 : 语法合法
  变量声明语句 : 语法合法
  变量声明语句 : 语法合法
  函数调用语句 : 语法合法
  表达式语句 : 语法合法
  赋值语句 : 语法合法
  表达式语句 : 语法合法
  赋值语句 : 语法合法
  表达式语句 : 语法合法
  赋值语句 : 语法合法
  函数调用语句 : 语法合法
  表达式语句 : 语法合法
  函数调用语句 : 语法合法
  表达式语句 : 语法合法
  return语句 : 语法合法
  main函数定义 : 语法合法
文法单元识别结束!
====================Parser==================
( self: Sentence null null, father: null, left: null, right: null )
( self: Include null null, father: Sentence, left: null, right: FunctionStatement )
( self: # SHARP 1_in, father: Include, left: null, right: include )
( self: include INCLUDE 1_in, father: Include, left: #, right: < )
( self: < LT 1_in, father: Include, left: include, right: stdio.h )
( self: stdio.h IDENTIFIER 1_in, father: Include, left: <, right: > )
( self: > GT 1_in, father: Include, left: stdio.h, right: null )
( self: FunctionStatement null null, father: Sentence, left: Include, right: null )
( self: Type null null, father: FunctionStatement, left: null, right: FunctionName )
( self: int FIELD_TYPE 2_fs, father: Type, left: null, right: null )
( self: FunctionName null null, father: FunctionStatement, left: Type, right: FunctionParameterList )
( self: main IDENTIFIER 2_fs, father: FunctionName, left: null, right: null )
( self: FunctionParameterList null null, father: FunctionStatement, left: FunctionName, right: Sentence )
( self: Sentence null null, father: FunctionStatement, left: FunctionParameterList, right: null )
( self: Statement null null, father: Sentence, left: null, right: Statement )
( self: Type null null, father: Statement, left: null, right: a )
( self: short FIELD_TYPE 2.1_st, father: Type, left: null, right: null )
( self: a IDENTIFIER 2.1_st, father: Statement, left: Type, right: null )
( self: Statement null null, father: Sentence, left: Statement, right: Statement )
( self: Type null null, father: Statement, left: null, right: b )
( self: short FIELD_TYPE 2.2_st, father: Type, left: null, right: null )
( self: b IDENTIFIER 2.2_st, father: Statement, left: Type, right: null )
( self: Statement null null, father: Sentence, left: Statement, right: Statement )
( self: Type null null, father: Statement, left: null, right: c )
( self: short FIELD_TYPE 2.3_st, father: Type, left: null, right: null )
( self: c IDENTIFIER 2.3_st, father: Statement, left: Type, right: null )
( self: Statement null null, father: Sentence, left: Statement, right: FunctionCall )
( self: Type null null, father: Statement, left: null, right: d )
( self: short FIELD_TYPE 2.4_st, father: Type, left: null, right: null )
( self: d IDENTIFIER 2.4_st, father: Statement, left: Type, right: null )
( self: FunctionCall null null, father: Sentence, left: Statement, right: Assignment )
( self: scanf FUNCTION_NAME 2.5_fc, father: FunctionCall, left: null, right: CallParameterList )
( self: CallParameterList null null, father: FunctionCall, left: scanf, right: null )
( self: %hd %hd %hd %hd STRING_CONSTANT 2.5_fc, father: CallParameterList, left: null, right: & )
( self: & BIT_AND 2.5_fc, father: CallParameterList, left: %hd %hd %hd %hd, right: a )
( self: a IDENTIFIER 2.5_fc, father: CallParameterList, left: &, right: & )
( self: & BIT_AND 2.5_fc, father: CallParameterList, left: a, right: b )
( self: b IDENTIFIER 2.5_fc, father: CallParameterList, left: &, right: & )
( self: & BIT_AND 2.5_fc, father: CallParameterList, left: b, right: c )
( self: c IDENTIFIER 2.5_fc, father: CallParameterList, left: &, right: & )
( self: & BIT_AND 2.5_fc, father: CallParameterList, left: c, right: d )
( self: d IDENTIFIER 2.5_fc, father: CallParameterList, left: &, right: null )
( self: Assignment null null, father: Sentence, left: FunctionCall, right: Assignment )
( self: a IDENTIFIER 2.6_as, father: Assignment, left: null, right: Expression )
( self: Expression SingleOrDoubleOperand null, father: Assignment, left: a, right: null )
( self: Expression Constant null, father: Expression, left: null, right: Expression )
( self: 34 _Constant 2.6_ex, father: Expression, left: null, right: null )
( self: Expression Variable null, father: Expression, left: Expression, right: Operator )
( self: b _Variable 2.6_ex, father: Expression, left: null, right: null )
( self: Operator Operator null, father: Expression, left: Expression, right: null )
( self: + _Operator 2.6_ex, father: Operator, left: null, right: null )
( self: Assignment null null, father: Sentence, left: Assignment, right: Assignment )
( self: c IDENTIFIER 2.7_as, father: Assignment, left: null, right: Expression )
( self: Expression SingleOrDoubleOperand null, father: Assignment, left: c, right: null )
( self: Expression Variable null, father: Expression, left: null, right: Expression )
( self: a _Variable 2.7_ex, father: Expression, left: null, right: null )
( self: Expression Variable null, father: Expression, left: Expression, right: Operator )
( self: b _Variable 2.7_ex, father: Expression, left: null, right: null )
( self: Operator Operator null, father: Expression, left: Expression, right: null )
( self: + _Operator 2.7_ex, father: Operator, left: null, right: null )
( self: Assignment null null, father: Sentence, left: Assignment, right: FunctionCall )
( self: a IDENTIFIER 2.8_as, father: Assignment, left: null, right: Expression )
( self: Expression SingleOrDoubleOperand null, father: Assignment, left: a, right: null )
( self: Expression Constant null, father: Expression, left: null, right: Expression )
( self: 12 _Constant 2.8_ex, father: Expression, left: null, right: null )
( self: Expression Constant null, father: Expression, left: Expression, right: Operator )
( self: 12 _Constant 2.8_ex, father: Expression, left: null, right: null )
( self: Operator Operator null, father: Expression, left: Expression, right: null )
( self: + _Operator 2.8_ex, father: Operator, left: null, right: null )
( self: FunctionCall null null, father: Sentence, left: Assignment, right: FunctionCall )
( self: printf FUNCTION_NAME 2.9_fc, father: FunctionCall, left: null, right: CallParameterList )
( self: CallParameterList null null, father: FunctionCall, left: printf, right: null )
( self: %hd STRING_CONSTANT 2.9_fc, father: CallParameterList, left: null, right: a )
( self: a IDENTIFIER 2.9_fc, father: CallParameterList, left: %hd, right: null )
( self: FunctionCall null null, father: Sentence, left: FunctionCall, right: Return )
( self: printf FUNCTION_NAME 2.10_fc, father: FunctionCall, left: null, right: CallParameterList )
( self: CallParameterList null null, father: FunctionCall, left: printf, right: null )
( self: %hd STRING_CONSTANT 2.10_fc, father: CallParameterList, left: null, right: Expression )
( self: Expression SingleOrDoubleOperand null, father: CallParameterList, left: %hd, right: null )
( self: Expression Variable null, father: Expression, left: null, right: Expression )
( self: b _Variable 2.10_ex, father: Expression, left: null, right: null )
( self: Expression Constant null, father: Expression, left: Expression, right: Operator )
( self: 23 _Constant 2.10_ex, father: Expression, left: null, right: null )
( self: Operator Operator null, father: Expression, left: Expression, right: null )
( self: + _Operator 2.10_ex, father: Operator, left: null, right: null )
( self: Return null null, father: Sentence, left: FunctionCall, right: null )
( self: return RETURN 2.11_re, father: Return, left: null, right: Expression )
( self: Expression SingleOrDoubleOperand null, father: Return, left: return, right: null )
( self: Expression Constant null, father: Expression, left: null, right: null )
( self: 0 _Constant 2.11_ex, father: Expression, left: null, right: null )

目标码生成开始...
目标码生成结束!
===================Assembler==================

	.section .rodata
	.align 2                                         # 2.5_fc
.LC0:	                                            # 2.5_fc
	.string	"%hd %hd %hd %hd"                        # 2.5_fc
	.align 2                                         # 2.9_fc
.LC1:	                                            # 2.9_fc
	.string	"%hd"                                    # 2.9_fc
	.align 2                                         # 2.10_fc
.LC2:	                                            # 2.10_fc
	.string	"%hd"                                    # 2.10_fc

	.section ".text"
	.align 2                                         # 2_fs
	.globl main                                      # 2_fs
	.type main, @function                            # 2_fs
main:	                                            # 2_fs
	stwu 1,-32(1)                                    # 2_fs
	mflr 0                                           # 2_fs
	stw 31,28(1)                                     # 2_fs
	stw 0,36(1)                                      # 2_fs
	mr 31,1                                          # 2_fs

	lis 0,.LC0@ha                                    # 2.5_fc
	addic 0,0,.LC0@l                                 # 2.5_fc
	mr 3,0                                           # 2.5_fc
	lhz 4,8(31)                                      # 2.5_fc
	lhz 5,10(31)                                     # 2.5_fc
	lhz 6,12(31)                                     # 2.5_fc
	lhz 7,14(31)                                     # 2.5_fc
	crxor 6,6,6                                      # 2.5_fc
	bl __isoc99_scanf                                # 2.5_fc

	li 9,34                                          # 2.6_ex
	lwz 0,10(31)                                     # 2.6_ex
	add 0,9,0                                        # 2.6_ex
	stw 0,16(31)                                     # 2.6_ex

	lbz 0,16(31)                                     # 2.6_as
	sth 0,8(31)                                      # 2.6_as

	lhz 0,8(31)                                      # 2.7_ex
	extsh 0,0                                        # 2.7_ex
	rlwinm 9,0,0,0xff                                # 2.7_ex
	lhz 0,10(31)                                     # 2.7_ex
	extsh 0,0                                        # 2.7_ex
	rlwinm 0,0,0,0xff                                # 2.7_ex
	add 0,9,0                                        # 2.7_ex
	sth 0,16(31)                                     # 2.7_ex

	lbz 0,16(31)                                     # 2.7_as
	sth 0,12(31)                                     # 2.7_as

	li 9,12                                          # 2.8_ex
	li 0,12                                          # 2.8_ex
	add 0,9,0                                        # 2.8_ex
	stw 0,16(31)                                     # 2.8_ex

	lbz 0,16(31)                                     # 2.8_as
	sth 0,8(31)                                      # 2.8_as

	lis 0,.LC1@ha                                    # 2.9_fc
	addic 0,0,.LC1@l                                 # 2.9_fc
	mr 3,0                                           # 2.9_fc
	lhz 4,8(31)                                      # 2.9_fc
	crxor 6,6,6                                      # 2.9_fc
	bl printf                                        # 2.9_fc

	lwz 9,10(31)                                     # 2.10_ex
	li 0,23                                          # 2.10_ex
	add 0,9,0                                        # 2.10_ex
	stw 0,16(31)                                     # 2.10_ex

	lis 0,.LC2@ha                                    # 2.10_fc
	addic 0,0,.LC2@l                                 # 2.10_fc
	mr 3,0                                           # 2.10_fc
	lwz 4,16(31)                                     # 2.10_fc
	crxor 6,6,6                                      # 2.10_fc
	bl printf                                        # 2.10_fc

	li 0,0                                           # 2.11_re
	mr 3,0                                           # 2.11_re
	lwz 11,0(1)                                      # 2_fs
	lwz 0,4(11)                                      # 2_fs
	mtlr 0                                           # 2_fs
	lwz 31,-4(11)                                    # 2_fs
	mr 1,11                                          # 2_fs
	blr                                              # 2_fs
	.size main,.-main                                # 2_fs
