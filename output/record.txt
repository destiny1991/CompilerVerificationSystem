预处理源代码开始...(test8.c)
预处理源代码结束
词法分析开始...
词法分析结束!
====================Source C Code==================
#include <stdio.h>

int f(int a);
int g(int b);

int main() {
    int n;
    int i;
    int sum;
    int tmp;
    double a, b;


    scanf("%d %f %f", &n, &a, &b);    
    sum = 0;

    for(i = 1; i <= n; i++) {
        tmp = i % 2;
        if((tmp == 0)) {
            sum = sum + i;
        } else {
            sum = sum - i * 2;
        
        } 
    }   

    tmp = f(n);

    printf("sum is %d", sum);

    return 0;
}

int f(int a) {
    int tmp;
    if (a <= 1) {
        return 1;
    }
    tmp = g(a, (a * 2));
    tmp = f(a);

    return a * tmp;
}

int g(int b, int c) {
    return c + b;
}



====================Labeled C Code==================
#include <stdio.h>                                // 1

int f(int a);                                     // 2
int g(int b);                                     // 3

int main() {                                      // 4
    int n;                                        // 4.1
    int i;                                        // 4.2
    int sum;                                      // 4.3
    int tmp;                                      // 4.4
    double a, b;                                  // 4.5


    scanf("%d %f %f", &n, &a, &b);                // 4.6
    sum = 0;                                      // 4.7

    for(i = 1; i <= n; i++) {                     // 4.8
        tmp = i % 2;                              // 4.8.1
        if((tmp == 0)) {                          // 4.8.2
            sum = sum + i;                        // 4.8.2.1
        } else {                                  // 4.8.3
            sum = sum - i * 2;                    // 4.8.3.1
        
        }                                         // 4.8.4
    }                                             // 4.9

    tmp = f(n);                                   // 4.10

    printf("sum is %d", sum);                     // 4.11

    return 0;                                     // 4.12
}                                                 // 5

int f(int a) {                                    // 6
    int tmp;                                      // 6.1
    if (a <= 1) {                                 // 6.2
        return 1;                                 // 6.2.1
    }                                             // 6.3
    tmp = g(a, (a * 2));                          // 6.4
    tmp = f(a);                                   // 6.5

    return a * tmp;                               // 6.6
}                                                 // 7

int g(int b, int c) {                             // 8
    return c + b;                                 // 8.1
}                                                 // 9



====================Lexer==================
(#, SHARP, 1)
(include, INCLUDE, 1)
(<, LT, 1)
(stdio.h, IDENTIFIER, 1)
(>, GT, 1)
(int, INT, 2)
(f, IDENTIFIER, 2)
((, LL_BRACKET, 2)
(int, INT, 2)
(a, IDENTIFIER, 2)
(), RL_BRACKET, 2)
(;, SEMICOLON, 2)
(int, INT, 3)
(g, IDENTIFIER, 3)
((, LL_BRACKET, 3)
(int, INT, 3)
(b, IDENTIFIER, 3)
(), RL_BRACKET, 3)
(;, SEMICOLON, 3)
(int, INT, 4)
(main, IDENTIFIER, 4)
((, LL_BRACKET, 4)
(), RL_BRACKET, 4)
({, LB_BRACKET, 4)
(int, INT, 4.1)
(n, IDENTIFIER, 4.1)
(;, SEMICOLON, 4.1)
(int, INT, 4.2)
(i, IDENTIFIER, 4.2)
(;, SEMICOLON, 4.2)
(int, INT, 4.3)
(sum, IDENTIFIER, 4.3)
(;, SEMICOLON, 4.3)
(int, INT, 4.4)
(tmp, IDENTIFIER, 4.4)
(;, SEMICOLON, 4.4)
(double, DOUBLE, 4.5)
(a, IDENTIFIER, 4.5)
(,, COMMA, 4.5)
(b, IDENTIFIER, 4.5)
(;, SEMICOLON, 4.5)
(scanf, IDENTIFIER, 4.6)
((, LL_BRACKET, 4.6)
(", DOUBLE_QUOTE, 4.6)
(%d %f %f, STRING_CONSTANT, 4.6)
(", DOUBLE_QUOTE, 4.6)
(,, COMMA, 4.6)
(&, BIT_AND, 4.6)
(n, IDENTIFIER, 4.6)
(,, COMMA, 4.6)
(&, BIT_AND, 4.6)
(a, IDENTIFIER, 4.6)
(,, COMMA, 4.6)
(&, BIT_AND, 4.6)
(b, IDENTIFIER, 4.6)
(), RL_BRACKET, 4.6)
(;, SEMICOLON, 4.6)
(sum, IDENTIFIER, 4.7)
(=, ASSIGN, 4.7)
(0, DIGIT_CONSTANT, 4.7)
(;, SEMICOLON, 4.7)
(for, FOR, 4.8)
((, LL_BRACKET, 4.8)
(i, IDENTIFIER, 4.8)
(=, ASSIGN, 4.8)
(1, DIGIT_CONSTANT, 4.8)
(;, SEMICOLON, 4.8)
(i, IDENTIFIER, 4.8)
(<=, LET, 4.8)
(n, IDENTIFIER, 4.8)
(;, SEMICOLON, 4.8)
(i, IDENTIFIER, 4.8)
(++, SELF_PLUS, 4.8)
(), RL_BRACKET, 4.8)
({, LB_BRACKET, 4.8)
(tmp, IDENTIFIER, 4.8.1)
(=, ASSIGN, 4.8.1)
(i, IDENTIFIER, 4.8.1)
(%, MOD, 4.8.1)
(2, DIGIT_CONSTANT, 4.8.1)
(;, SEMICOLON, 4.8.1)
(if, IF, 4.8.2)
((, LL_BRACKET, 4.8.2)
((, LL_BRACKET, 4.8.2)
(tmp, IDENTIFIER, 4.8.2)
(==, EQU, 4.8.2)
(0, DIGIT_CONSTANT, 4.8.2)
(), RL_BRACKET, 4.8.2)
(), RL_BRACKET, 4.8.2)
({, LB_BRACKET, 4.8.2)
(sum, IDENTIFIER, 4.8.2.1)
(=, ASSIGN, 4.8.2.1)
(sum, IDENTIFIER, 4.8.2.1)
(+, PLUS, 4.8.2.1)
(i, IDENTIFIER, 4.8.2.1)
(;, SEMICOLON, 4.8.2.1)
(}, RB_BRACKET, 4.8.3)
(else, ELSE, 4.8.3)
({, LB_BRACKET, 4.8.3)
(sum, IDENTIFIER, 4.8.3.1)
(=, ASSIGN, 4.8.3.1)
(sum, IDENTIFIER, 4.8.3.1)
(-, MINUS, 4.8.3.1)
(i, IDENTIFIER, 4.8.3.1)
(*, MUL, 4.8.3.1)
(2, DIGIT_CONSTANT, 4.8.3.1)
(;, SEMICOLON, 4.8.3.1)
(}, RB_BRACKET, 4.8.4)
(}, RB_BRACKET, 4.9)
(tmp, IDENTIFIER, 4.10)
(=, ASSIGN, 4.10)
(f, IDENTIFIER, 4.10)
((, LL_BRACKET, 4.10)
(n, IDENTIFIER, 4.10)
(), RL_BRACKET, 4.10)
(;, SEMICOLON, 4.10)
(printf, IDENTIFIER, 4.11)
((, LL_BRACKET, 4.11)
(", DOUBLE_QUOTE, 4.11)
(sum is %d, STRING_CONSTANT, 4.11)
(", DOUBLE_QUOTE, 4.11)
(,, COMMA, 4.11)
(sum, IDENTIFIER, 4.11)
(), RL_BRACKET, 4.11)
(;, SEMICOLON, 4.11)
(return, RETURN, 4.12)
(0, DIGIT_CONSTANT, 4.12)
(;, SEMICOLON, 4.12)
(}, RB_BRACKET, 5)
(int, INT, 6)
(f, IDENTIFIER, 6)
((, LL_BRACKET, 6)
(int, INT, 6)
(a, IDENTIFIER, 6)
(), RL_BRACKET, 6)
({, LB_BRACKET, 6)
(int, INT, 6.1)
(tmp, IDENTIFIER, 6.1)
(;, SEMICOLON, 6.1)
(if, IF, 6.2)
((, LL_BRACKET, 6.2)
(a, IDENTIFIER, 6.2)
(<=, LET, 6.2)
(1, DIGIT_CONSTANT, 6.2)
(), RL_BRACKET, 6.2)
({, LB_BRACKET, 6.2)
(return, RETURN, 6.2.1)
(1, DIGIT_CONSTANT, 6.2.1)
(;, SEMICOLON, 6.2.1)
(}, RB_BRACKET, 6.3)
(tmp, IDENTIFIER, 6.4)
(=, ASSIGN, 6.4)
(g, IDENTIFIER, 6.4)
((, LL_BRACKET, 6.4)
(a, IDENTIFIER, 6.4)
(,, COMMA, 6.4)
((, LL_BRACKET, 6.4)
(a, IDENTIFIER, 6.4)
(*, MUL, 6.4)
(2, DIGIT_CONSTANT, 6.4)
(), RL_BRACKET, 6.4)
(), RL_BRACKET, 6.4)
(;, SEMICOLON, 6.4)
(tmp, IDENTIFIER, 6.5)
(=, ASSIGN, 6.5)
(f, IDENTIFIER, 6.5)
((, LL_BRACKET, 6.5)
(a, IDENTIFIER, 6.5)
(), RL_BRACKET, 6.5)
(;, SEMICOLON, 6.5)
(return, RETURN, 6.6)
(a, IDENTIFIER, 6.6)
(*, MUL, 6.6)
(tmp, IDENTIFIER, 6.6)
(;, SEMICOLON, 6.6)
(}, RB_BRACKET, 7)
(int, INT, 8)
(g, IDENTIFIER, 8)
((, LL_BRACKET, 8)
(int, INT, 8)
(b, IDENTIFIER, 8)
(,, COMMA, 8)
(int, INT, 8)
(c, IDENTIFIER, 8)
(), RL_BRACKET, 8)
({, LB_BRACKET, 8)
(return, RETURN, 8.1)
(c, IDENTIFIER, 8.1)
(+, PLUS, 8.1)
(b, IDENTIFIER, 8.1)
(;, SEMICOLON, 8.1)
(}, RB_BRACKET, 9)

语法分析开始...
  include语句 : 语法合法
  f函数定义 : 语法合法
  g函数定义 : 语法合法
  变量声明语句 : 语法合法
  变量声明语句 : 语法合法
  变量声明语句 : 语法合法
  变量声明语句 : 语法合法
  变量声明语句 : 语法合法
  函数调用语句 : 语法合法
  表达式语句 : 语法合法
  赋值语句 : 语法合法
  表达式语句 : 语法合法
  赋值语句 : 语法合法
  表达式语句 : 语法合法
  表达式语句 : 语法合法
  表达式语句 : 语法合法
  赋值语句 : 语法合法
  表达式语句 : 语法合法
  表达式语句 : 语法合法
  赋值语句 : 语法合法
  表达式语句 : 语法合法
  赋值语句 : 语法合法
  if-else语句 : 语法合法
  for语句 : 语法合法
  函数调用语句 : 语法合法
  赋值语句 : 语法合法
  函数调用语句 : 语法合法
  表达式语句 : 语法合法
  return语句 : 语法合法
  main函数定义 : 语法合法
  变量声明语句 : 语法合法
  表达式语句 : 语法合法
  表达式语句 : 语法合法
  return语句 : 语法合法
  if-else语句 : 语法合法
  表达式语句 : 语法合法
  函数调用语句 : 语法合法
  赋值语句 : 语法合法
  函数调用语句 : 语法合法
  赋值语句 : 语法合法
  表达式语句 : 语法合法
  return语句 : 语法合法
  f函数定义 : 语法合法
  表达式语句 : 语法合法
  return语句 : 语法合法
  g函数定义 : 语法合法
