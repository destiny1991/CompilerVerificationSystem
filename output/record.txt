预处理源代码开始...(test3.c)
预处理源代码结束
词法分析开始...
词法分析结束!
====================Source C Code==================
#include <stdio.h>

int main() {
    short a;
    short b;
    short c;
    short d;


    scanf("%hd %hd %hd %hd", &a, &b, &c, &d);


    a = b + c - d + a;
    printf("%d", a);


    return 0;
}

====================Labeled C Code==================
#include <stdio.h>                                // 1

int main() {                                      // 2
    short a;                                      // 2.1
    short b;                                      // 2.2
    short c;                                      // 2.3
    short d;                                      // 2.4


    scanf("%hd %hd %hd %hd", &a, &b, &c, &d);     // 2.5


    a = b + c - d + a;                            // 2.6
    printf("%d", a);                              // 2.7


    return 0;                                     // 2.8
}                                                 // 3

====================Lexer==================
(#, SHARP, 1)
(include, INCLUDE, 1)
(<, LT, 1)
(stdio.h, IDENTIFIER, 1)
(>, GT, 1)
(int, INT, 2)
(main, IDENTIFIER, 2)
((, LL_BRACKET, 2)
(), RL_BRACKET, 2)
({, LB_BRACKET, 2)
(short, IDENTIFIER, 2.1)
(a, IDENTIFIER, 2.1)
(;, SEMICOLON, 2.1)
(short, IDENTIFIER, 2.2)
(b, IDENTIFIER, 2.2)
(;, SEMICOLON, 2.2)
(short, IDENTIFIER, 2.3)
(c, IDENTIFIER, 2.3)
(;, SEMICOLON, 2.3)
(short, IDENTIFIER, 2.4)
(d, IDENTIFIER, 2.4)
(;, SEMICOLON, 2.4)
(scanf, IDENTIFIER, 2.5)
((, LL_BRACKET, 2.5)
(", DOUBLE_QUOTE, 2.5)
(%hd %hd %hd %hd, STRING_CONSTANT, 2.5)
(", DOUBLE_QUOTE, 2.5)
(,, COMMA, 2.5)
(&, BIT_AND, 2.5)
(a, IDENTIFIER, 2.5)
(,, COMMA, 2.5)
(&, BIT_AND, 2.5)
(b, IDENTIFIER, 2.5)
(,, COMMA, 2.5)
(&, BIT_AND, 2.5)
(c, IDENTIFIER, 2.5)
(,, COMMA, 2.5)
(&, BIT_AND, 2.5)
(d, IDENTIFIER, 2.5)
(), RL_BRACKET, 2.5)
(;, SEMICOLON, 2.5)
(a, IDENTIFIER, 2.6)
(=, ASSIGN, 2.6)
(b, IDENTIFIER, 2.6)
(+, PLUS, 2.6)
(c, IDENTIFIER, 2.6)
(-, MINUS, 2.6)
(d, IDENTIFIER, 2.6)
(+, PLUS, 2.6)
(a, IDENTIFIER, 2.6)
(;, SEMICOLON, 2.6)
(printf, IDENTIFIER, 2.7)
((, LL_BRACKET, 2.7)
(", DOUBLE_QUOTE, 2.7)
(%d, STRING_CONSTANT, 2.7)
(", DOUBLE_QUOTE, 2.7)
(,, COMMA, 2.7)
(a, IDENTIFIER, 2.7)
(), RL_BRACKET, 2.7)
(;, SEMICOLON, 2.7)
(return, RETURN, 2.8)
(0, DIGIT_CONSTANT, 2.8)
(;, SEMICOLON, 2.8)
(}, RB_BRACKET, 3)

语法分析开始...
  include语句 : 语法合法
  变量声明语句 : 语法合法
  变量声明语句 : 语法合法
  变量声明语句 : 语法合法
  变量声明语句 : 语法合法
  函数调用语句 : 语法合法
  表达式语句 : 语法合法
  赋值语句 : 语法合法
  函数调用语句 : 语法合法
  表达式语句 : 语法合法
  return语句 : 语法合法
  main函数定义 : 语法合法
语法分析结束!
====================Parser==================
( self: Sentence null null, father: null, left: null, right: null )
( self: Include null null, father: Sentence, left: null, right: FunctionStatement )
( self: # SHARP 1_in, father: Include, left: null, right: include )
( self: include INCLUDE 1_in, father: Include, left: #, right: < )
( self: < LT 1_in, father: Include, left: include, right: stdio.h )
( self: stdio.h IDENTIFIER 1_in, father: Include, left: <, right: > )
( self: > GT 1_in, father: Include, left: stdio.h, right: null )
( self: FunctionStatement null null, father: Sentence, left: Include, right: null )
( self: Type null null, father: FunctionStatement, left: null, right: FunctionName )
( self: int FIELD_TYPE 2_fs, father: Type, left: null, right: null )
( self: FunctionName null null, father: FunctionStatement, left: Type, right: FunctionParameterList )
( self: main IDENTIFIER 2_fs, father: FunctionName, left: null, right: null )
( self: FunctionParameterList null null, father: FunctionStatement, left: FunctionName, right: Sentence )
( self: Sentence null null, father: FunctionStatement, left: FunctionParameterList, right: null )
( self: Statement null null, father: Sentence, left: null, right: Statement )
( self: Type null null, father: Statement, left: null, right: a )
( self: short FIELD_TYPE 2.1_st, father: Type, left: null, right: null )
( self: a IDENTIFIER 2.1_st, father: Statement, left: Type, right: null )
( self: Statement null null, father: Sentence, left: Statement, right: Statement )
( self: Type null null, father: Statement, left: null, right: b )
( self: short FIELD_TYPE 2.2_st, father: Type, left: null, right: null )
( self: b IDENTIFIER 2.2_st, father: Statement, left: Type, right: null )
( self: Statement null null, father: Sentence, left: Statement, right: Statement )
( self: Type null null, father: Statement, left: null, right: c )
( self: short FIELD_TYPE 2.3_st, father: Type, left: null, right: null )
( self: c IDENTIFIER 2.3_st, father: Statement, left: Type, right: null )
( self: Statement null null, father: Sentence, left: Statement, right: FunctionCall )
( self: Type null null, father: Statement, left: null, right: d )
( self: short FIELD_TYPE 2.4_st, father: Type, left: null, right: null )
( self: d IDENTIFIER 2.4_st, father: Statement, left: Type, right: null )
( self: FunctionCall null null, father: Sentence, left: Statement, right: Assignment )
( self: scanf FUNCTION_NAME 2.5_fc, father: FunctionCall, left: null, right: CallParameterList )
( self: CallParameterList null null, father: FunctionCall, left: scanf, right: null )
( self: %hd %hd %hd %hd STRING_CONSTANT 2.5_fc, father: CallParameterList, left: null, right: & )
( self: & BIT_AND 2.5_fc, father: CallParameterList, left: %hd %hd %hd %hd, right: a )
( self: a IDENTIFIER 2.5_fc, father: CallParameterList, left: &, right: & )
( self: & BIT_AND 2.5_fc, father: CallParameterList, left: a, right: b )
( self: b IDENTIFIER 2.5_fc, father: CallParameterList, left: &, right: & )
( self: & BIT_AND 2.5_fc, father: CallParameterList, left: b, right: c )
( self: c IDENTIFIER 2.5_fc, father: CallParameterList, left: &, right: & )
( self: & BIT_AND 2.5_fc, father: CallParameterList, left: c, right: d )
( self: d IDENTIFIER 2.5_fc, father: CallParameterList, left: &, right: null )
( self: Assignment null null, father: Sentence, left: FunctionCall, right: FunctionCall )
( self: a IDENTIFIER 2.6_as, father: Assignment, left: null, right: Expression )
( self: Expression SingleOrDoubleOperand null, father: Assignment, left: a, right: null )
( self: Expression Variable null, father: Expression, left: null, right: Expression )
( self: b _Variable 2.6_ex, father: Expression, left: null, right: null )
( self: Expression Variable null, father: Expression, left: Expression, right: Expression )
( self: c _Variable 2.6_ex, father: Expression, left: null, right: null )
( self: Expression Variable null, father: Expression, left: Expression, right: Expression )
( self: d _Variable 2.6_ex, father: Expression, left: null, right: null )
( self: Expression Variable null, father: Expression, left: Expression, right: Operator )
( self: a _Variable 2.6_ex, father: Expression, left: null, right: null )
( self: Operator Operator null, father: Expression, left: Expression, right: Operator )
( self: + _Operator 2.6_ex, father: Operator, left: null, right: null )
( self: Operator Operator null, father: Expression, left: Operator, right: Operator )
( self: - _Operator 2.6_ex, father: Operator, left: null, right: null )
( self: Operator Operator null, father: Expression, left: Operator, right: null )
( self: + _Operator 2.6_ex, father: Operator, left: null, right: null )
( self: FunctionCall null null, father: Sentence, left: Assignment, right: Return )
( self: printf FUNCTION_NAME 2.7_fc, father: FunctionCall, left: null, right: CallParameterList )
( self: CallParameterList null null, father: FunctionCall, left: printf, right: null )
( self: %d STRING_CONSTANT 2.7_fc, father: CallParameterList, left: null, right: a )
( self: a IDENTIFIER 2.7_fc, father: CallParameterList, left: %d, right: null )
( self: Return null null, father: Sentence, left: FunctionCall, right: null )
( self: return RETURN 2.8_re, father: Return, left: null, right: Expression )
( self: Expression SingleOrDoubleOperand null, father: Return, left: return, right: null )
( self: Expression Constant null, father: Expression, left: null, right: null )
( self: 0 _Constant 2.8_ex, father: Expression, left: null, right: null )

目标码生成开始...
