预处理源代码开始...(evenSum.c)
预处理源代码结束
词法分析开始...
词法分析结束!
====================Source C Code==================
#include <stdio.h>

int main() {
    int n;
    int i;
    int sum;
    int tmp;
    double a, b;


    scanf("%d %f %f", &n, &a, &b);    
    sum = 0;

    for(i = 1; i <= n; i++) {
        tmp = i % 2;
        if(tmp == 0) {
            sum = sum + i;
        } else {
            sum = sum - i * 2;
        
        } 
    }   

    i = !n;
    i = ~n;
    if (a != b) {
        a = a * b;
    }


    printf("sum is %d", sum);

    return 0;
}

====================Labeled C Code==================
#include <stdio.h>                                // 1

int main() {                                      // 2
    int n;                                        // 2.1
    int i;                                        // 2.2
    int sum;                                      // 2.3
    int tmp;                                      // 2.4
    double a, b;                                  // 2.5


    scanf("%d %f %f", &n, &a, &b);                // 2.6
    sum = 0;                                      // 2.7

    for(i = 1; i <= n; i++) {                     // 2.8
        tmp = i % 2;                              // 2.8.1
        if(tmp == 0) {                            // 2.8.2
            sum = sum + i;                        // 2.8.2.1
        } else {                                  // 2.8.3
            sum = sum - i * 2;                    // 2.8.3.1
        
        }                                         // 2.8.4
    }                                             // 2.9

    i = !n;                                       // 2.10
    i = ~n;                                       // 2.11
    if (a != b) {                                 // 2.12
        a = a * b;                                // 2.12.1
    }                                             // 2.13


    printf("sum is %d", sum);                     // 2.14

    return 0;                                     // 2.15
}                                                 // 3

====================Lexer==================
(#, SHARP, 1)
(include, INCLUDE, 1)
(<, LT, 1)
(stdio.h, IDENTIFIER, 1)
(>, GT, 1)
(int, INT, 2)
(main, IDENTIFIER, 2)
((, LL_BRACKET, 2)
(), RL_BRACKET, 2)
({, LB_BRACKET, 2)
(int, INT, 2.1)
(n, IDENTIFIER, 2.1)
(;, SEMICOLON, 2.1)
(int, INT, 2.2)
(i, IDENTIFIER, 2.2)
(;, SEMICOLON, 2.2)
(int, INT, 2.3)
(sum, IDENTIFIER, 2.3)
(;, SEMICOLON, 2.3)
(int, INT, 2.4)
(tmp, IDENTIFIER, 2.4)
(;, SEMICOLON, 2.4)
(double, DOUBLE, 2.5)
(a, IDENTIFIER, 2.5)
(,, COMMA, 2.5)
(b, IDENTIFIER, 2.5)
(;, SEMICOLON, 2.5)
(scanf, IDENTIFIER, 2.6)
((, LL_BRACKET, 2.6)
(", DOUBLE_QUOTE, 2.6)
(%d %f %f, STRING_CONSTANT, 2.6)
(", DOUBLE_QUOTE, 2.6)
(,, COMMA, 2.6)
(&, BIT_AND, 2.6)
(n, IDENTIFIER, 2.6)
(,, COMMA, 2.6)
(&, BIT_AND, 2.6)
(a, IDENTIFIER, 2.6)
(,, COMMA, 2.6)
(&, BIT_AND, 2.6)
(b, IDENTIFIER, 2.6)
(), RL_BRACKET, 2.6)
(;, SEMICOLON, 2.6)
(sum, IDENTIFIER, 2.7)
(=, ASSIGN, 2.7)
(0, DIGIT_CONSTANT, 2.7)
(;, SEMICOLON, 2.7)
(for, FOR, 2.8)
((, LL_BRACKET, 2.8)
(i, IDENTIFIER, 2.8)
(=, ASSIGN, 2.8)
(1, DIGIT_CONSTANT, 2.8)
(;, SEMICOLON, 2.8)
(i, IDENTIFIER, 2.8)
(<=, LET, 2.8)
(n, IDENTIFIER, 2.8)
(;, SEMICOLON, 2.8)
(i, IDENTIFIER, 2.8)
(++, SELF_PLUS, 2.8)
(), RL_BRACKET, 2.8)
({, LB_BRACKET, 2.8)
(tmp, IDENTIFIER, 2.8.1)
(=, ASSIGN, 2.8.1)
(i, IDENTIFIER, 2.8.1)
(%, MOD, 2.8.1)
(2, DIGIT_CONSTANT, 2.8.1)
(;, SEMICOLON, 2.8.1)
(if, IF, 2.8.2)
((, LL_BRACKET, 2.8.2)
(tmp, IDENTIFIER, 2.8.2)
(==, EQU, 2.8.2)
(0, DIGIT_CONSTANT, 2.8.2)
(), RL_BRACKET, 2.8.2)
({, LB_BRACKET, 2.8.2)
(sum, IDENTIFIER, 2.8.2.1)
(=, ASSIGN, 2.8.2.1)
(sum, IDENTIFIER, 2.8.2.1)
(+, PLUS, 2.8.2.1)
(i, IDENTIFIER, 2.8.2.1)
(;, SEMICOLON, 2.8.2.1)
(}, RB_BRACKET, 2.8.3)
(else, ELSE, 2.8.3)
({, LB_BRACKET, 2.8.3)
(sum, IDENTIFIER, 2.8.3.1)
(=, ASSIGN, 2.8.3.1)
(sum, IDENTIFIER, 2.8.3.1)
(-, MINUS, 2.8.3.1)
(i, IDENTIFIER, 2.8.3.1)
(*, MUL, 2.8.3.1)
(2, DIGIT_CONSTANT, 2.8.3.1)
(;, SEMICOLON, 2.8.3.1)
(}, RB_BRACKET, 2.8.4)
(}, RB_BRACKET, 2.9)
(i, IDENTIFIER, 2.10)
(=, ASSIGN, 2.10)
(!, NOT, 2.10)
(n, IDENTIFIER, 2.10)
(;, SEMICOLON, 2.10)
(i, IDENTIFIER, 2.11)
(=, ASSIGN, 2.11)
(~, BIT_NOT, 2.11)
(n, IDENTIFIER, 2.11)
(;, SEMICOLON, 2.11)
(if, IF, 2.12)
((, LL_BRACKET, 2.12)
(a, IDENTIFIER, 2.12)
(!=, UNE, 2.12)
(b, IDENTIFIER, 2.12)
(), RL_BRACKET, 2.12)
({, LB_BRACKET, 2.12)
(a, IDENTIFIER, 2.12.1)
(=, ASSIGN, 2.12.1)
(a, IDENTIFIER, 2.12.1)
(*, MUL, 2.12.1)
(b, IDENTIFIER, 2.12.1)
(;, SEMICOLON, 2.12.1)
(}, RB_BRACKET, 2.13)
(printf, IDENTIFIER, 2.14)
((, LL_BRACKET, 2.14)
(", DOUBLE_QUOTE, 2.14)
(sum is %d, STRING_CONSTANT, 2.14)
(", DOUBLE_QUOTE, 2.14)
(,, COMMA, 2.14)
(sum, IDENTIFIER, 2.14)
(), RL_BRACKET, 2.14)
(;, SEMICOLON, 2.14)
(return, RETURN, 2.15)
(0, DIGIT_CONSTANT, 2.15)
(;, SEMICOLON, 2.15)
(}, RB_BRACKET, 3)

语法分析开始...
  include语句 : 语法合法
  变量声明语句 : 语法合法
  变量声明语句 : 语法合法
  变量声明语句 : 语法合法
  变量声明语句 : 语法合法
  变量声明语句 : 语法合法
  函数调用语句 : 语法合法
  表达式语句 : 语法合法
  赋值语句 : 语法合法
  表达式语句 : 语法合法
  赋值语句 : 语法合法
  表达式语句 : 语法合法
  表达式语句 : 语法合法
  表达式语句 : 语法合法
  赋值语句 : 语法合法
  表达式语句 : 语法合法
  表达式语句 : 语法合法
  赋值语句 : 语法合法
  表达式语句 : 语法合法
  赋值语句 : 语法合法
  if-else语句 : 语法合法
  for语句 : 语法合法
  表达式语句 : 语法合法
  赋值语句 : 语法合法
  表达式语句 : 语法合法
  赋值语句 : 语法合法
  表达式语句 : 语法合法
  表达式语句 : 语法合法
  赋值语句 : 语法合法
  if-else语句 : 语法合法
  函数调用语句 : 语法合法
  表达式语句 : 语法合法
  return语句 : 语法合法
  main函数定义 : 语法合法
语法分析结束!
====================Parser==================
( self: Sentence null null, father: null, left: null, right: null )
( self: Include null null, father: Sentence, left: null, right: FunctionStatement )
( self: # SHARP 1_in, father: Include, left: null, right: include )
( self: include INCLUDE 1_in, father: Include, left: #, right: < )
( self: < LT 1_in, father: Include, left: include, right: stdio.h )
( self: stdio.h IDENTIFIER 1_in, father: Include, left: <, right: > )
( self: > GT 1_in, father: Include, left: stdio.h, right: null )
( self: FunctionStatement null null, father: Sentence, left: Include, right: null )
( self: Type null null, father: FunctionStatement, left: null, right: FunctionName )
( self: int FIELD_TYPE 2_fs, father: Type, left: null, right: null )
( self: FunctionName null null, father: FunctionStatement, left: Type, right: FunctionParameterList )
( self: main IDENTIFIER 2_fs, father: FunctionName, left: null, right: null )
( self: FunctionParameterList null null, father: FunctionStatement, left: FunctionName, right: Sentence )
( self: Sentence null null, father: FunctionStatement, left: FunctionParameterList, right: null )
( self: Statement null null, father: Sentence, left: null, right: Statement )
( self: Type null null, father: Statement, left: null, right: n )
( self: int FIELD_TYPE 2.1_st, father: Type, left: null, right: null )
( self: n IDENTIFIER 2.1_st, father: Statement, left: Type, right: null )
( self: Statement null null, father: Sentence, left: Statement, right: Statement )
( self: Type null null, father: Statement, left: null, right: i )
( self: int FIELD_TYPE 2.2_st, father: Type, left: null, right: null )
( self: i IDENTIFIER 2.2_st, father: Statement, left: Type, right: null )
( self: Statement null null, father: Sentence, left: Statement, right: Statement )
( self: Type null null, father: Statement, left: null, right: sum )
( self: int FIELD_TYPE 2.3_st, father: Type, left: null, right: null )
( self: sum IDENTIFIER 2.3_st, father: Statement, left: Type, right: null )
( self: Statement null null, father: Sentence, left: Statement, right: Statement )
( self: Type null null, father: Statement, left: null, right: tmp )
( self: int FIELD_TYPE 2.4_st, father: Type, left: null, right: null )
( self: tmp IDENTIFIER 2.4_st, father: Statement, left: Type, right: null )
( self: Statement null null, father: Sentence, left: Statement, right: Statement )
( self: Type null null, father: Statement, left: null, right: a )
( self: double FIELD_TYPE 2.5_st, father: Type, left: null, right: null )
( self: a IDENTIFIER 2.5_st, father: Statement, left: Type, right: null )
( self: Statement null null, father: Sentence, left: Statement, right: FunctionCall )
( self: Type null null, father: Statement, left: null, right: b )
( self: double FIELD_TYPE null, father: Type, left: null, right: null )
( self: b IDENTIFIER 2.5_st, father: Statement, left: Type, right: null )
( self: FunctionCall null null, father: Sentence, left: Statement, right: Assignment )
( self: scanf FUNCTION_NAME 2.6_fc, father: FunctionCall, left: null, right: CallParameterList )
( self: CallParameterList null null, father: FunctionCall, left: scanf, right: null )
( self: %d %f %f STRING_CONSTANT 2.6_fc, father: CallParameterList, left: null, right: & )
( self: & BIT_AND 2.6_fc, father: CallParameterList, left: %d %f %f, right: n )
( self: n IDENTIFIER 2.6_fc, father: CallParameterList, left: &, right: & )
( self: & BIT_AND 2.6_fc, father: CallParameterList, left: n, right: a )
( self: a IDENTIFIER 2.6_fc, father: CallParameterList, left: &, right: & )
( self: & BIT_AND 2.6_fc, father: CallParameterList, left: a, right: b )
( self: b IDENTIFIER 2.6_fc, father: CallParameterList, left: &, right: null )
( self: Assignment null null, father: Sentence, left: FunctionCall, right: Control )
( self: sum IDENTIFIER 2.7_as, father: Assignment, left: null, right: Expression )
( self: Expression SingleOrDoubleOperand null, father: Assignment, left: sum, right: null )
( self: Expression Constant null, father: Expression, left: null, right: null )
( self: 0 _Constant 2.7_ex, father: Expression, left: null, right: null )
( self: Control ForControl 2.8_fo, father: Sentence, left: Assignment, right: Assignment )
( self: Assignment null null, father: Control, left: null, right: Expression )
( self: i IDENTIFIER 2.8_as, father: Assignment, left: null, right: Expression )
( self: Expression SingleOrDoubleOperand null, father: Assignment, left: i, right: null )
( self: Expression Constant null, father: Expression, left: null, right: null )
( self: 1 _Constant 2.8_ex, father: Expression, left: null, right: null )
( self: Expression SingleOrDoubleOperand null, father: Control, left: Assignment, right: Sentence )
( self: Expression Variable null, father: Expression, left: null, right: Expression )
( self: i _Variable 2.8_ex, father: Expression, left: null, right: null )
( self: Expression Variable null, father: Expression, left: Expression, right: Operator )
( self: n _Variable 2.8_ex, father: Expression, left: null, right: null )
( self: Operator Operator null, father: Expression, left: Expression, right: null )
( self: <= _Operator 2.8_ex, father: Operator, left: null, right: null )
( self: Sentence null null, father: Control, left: Expression, right: Expression )
( self: Assignment null null, father: Sentence, left: null, right: Control )
( self: tmp IDENTIFIER 2.8.1_as, father: Assignment, left: null, right: Expression )
( self: Expression SingleOrDoubleOperand null, father: Assignment, left: tmp, right: null )
( self: Expression Variable null, father: Expression, left: null, right: Expression )
( self: i _Variable 2.8.1_ex, father: Expression, left: null, right: null )
( self: Expression Constant null, father: Expression, left: Expression, right: Operator )
( self: 2 _Constant 2.8.1_ex, father: Expression, left: null, right: null )
( self: Operator Operator null, father: Expression, left: Expression, right: null )
( self: % _Operator 2.8.1_ex, father: Operator, left: null, right: null )
( self: Control IfElseControl null, father: Sentence, left: Assignment, right: null )
( self: IfControl null 2.8.2_if, father: Control, left: null, right: ElseControl )
( self: Expression SingleOrDoubleOperand null, father: IfControl, left: null, right: Sentence )
( self: Expression Variable null, father: Expression, left: null, right: Expression )
( self: tmp _Variable 2.8.2_ex, father: Expression, left: null, right: null )
( self: Expression Constant null, father: Expression, left: Expression, right: Operator )
( self: 0 _Constant 2.8.2_ex, father: Expression, left: null, right: null )
( self: Operator Operator null, father: Expression, left: Expression, right: null )
( self: == _Operator 2.8.2_ex, father: Operator, left: null, right: null )
( self: Sentence null null, father: IfControl, left: Expression, right: null )
( self: Assignment null null, father: Sentence, left: null, right: null )
( self: sum IDENTIFIER 2.8.2.1_as, father: Assignment, left: null, right: Expression )
( self: Expression SingleOrDoubleOperand null, father: Assignment, left: sum, right: null )
( self: Expression Variable null, father: Expression, left: null, right: Expression )
( self: sum _Variable 2.8.2.1_ex, father: Expression, left: null, right: null )
( self: Expression Variable null, father: Expression, left: Expression, right: Operator )
( self: i _Variable 2.8.2.1_ex, father: Expression, left: null, right: null )
( self: Operator Operator null, father: Expression, left: Expression, right: null )
( self: + _Operator 2.8.2.1_ex, father: Operator, left: null, right: null )
( self: ElseControl null 2.8.3_el, father: Control, left: IfControl, right: null )
( self: Sentence null null, father: ElseControl, left: null, right: null )
( self: Assignment null null, father: Sentence, left: null, right: null )
( self: sum IDENTIFIER 2.8.3.1_as, father: Assignment, left: null, right: Expression )
( self: Expression SingleOrDoubleOperand null, father: Assignment, left: sum, right: null )
( self: Expression Variable null, father: Expression, left: null, right: Expression )
( self: sum _Variable 2.8.3.1_ex, father: Expression, left: null, right: null )
( self: Expression Variable null, father: Expression, left: Expression, right: Expression )
( self: i _Variable 2.8.3.1_ex, father: Expression, left: null, right: null )
( self: Expression Constant null, father: Expression, left: Expression, right: Operator )
( self: 2 _Constant 2.8.3.1_ex, father: Expression, left: null, right: null )
( self: Operator Operator null, father: Expression, left: Expression, right: Operator )
( self: * _Operator 2.8.3.1_ex, father: Operator, left: null, right: null )
( self: Operator Operator null, father: Expression, left: Operator, right: null )
( self: - _Operator 2.8.3.1_ex, father: Operator, left: null, right: null )
( self: Expression SingleOrDoubleOperand null, father: Control, left: Sentence, right: null )
( self: Expression Variable null, father: Expression, left: null, right: Operator )
( self: i _Variable 2.8_ex, father: Expression, left: null, right: null )
( self: Operator Operator null, father: Expression, left: Expression, right: null )
( self: ++ _Operator 2.8_ex, father: Operator, left: null, right: null )
( self: Assignment null null, father: Sentence, left: Control, right: Assignment )
( self: i IDENTIFIER 2.10_as, father: Assignment, left: null, right: Expression )
( self: Expression SingleOrDoubleOperand null, father: Assignment, left: i, right: null )
( self: Expression Variable null, father: Expression, left: null, right: Operator )
( self: n _Variable 2.10_ex, father: Expression, left: null, right: null )
( self: Operator Operator null, father: Expression, left: Expression, right: null )
( self: ! _Operator 2.10_ex, father: Operator, left: null, right: null )
( self: Assignment null null, father: Sentence, left: Assignment, right: Control )
( self: i IDENTIFIER 2.11_as, father: Assignment, left: null, right: Expression )
( self: Expression SingleOrDoubleOperand null, father: Assignment, left: i, right: null )
( self: Expression Variable null, father: Expression, left: null, right: Operator )
( self: n _Variable 2.11_ex, father: Expression, left: null, right: null )
( self: Operator Operator null, father: Expression, left: Expression, right: null )
( self: ~ _Operator 2.11_ex, father: Operator, left: null, right: null )
( self: Control IfElseControl null, father: Sentence, left: Assignment, right: FunctionCall )
( self: IfControl null 2.12_if, father: Control, left: null, right: null )
( self: Expression SingleOrDoubleOperand null, father: IfControl, left: null, right: Sentence )
( self: Expression Variable null, father: Expression, left: null, right: Expression )
( self: a _Variable 2.12_ex, father: Expression, left: null, right: null )
( self: Expression Variable null, father: Expression, left: Expression, right: Operator )
( self: b _Variable 2.12_ex, father: Expression, left: null, right: null )
( self: Operator Operator null, father: Expression, left: Expression, right: null )
( self: != _Operator 2.12_ex, father: Operator, left: null, right: null )
( self: Sentence null null, father: IfControl, left: Expression, right: null )
( self: Assignment null null, father: Sentence, left: null, right: null )
( self: a IDENTIFIER 2.12.1_as, father: Assignment, left: null, right: Expression )
( self: Expression SingleOrDoubleOperand null, father: Assignment, left: a, right: null )
( self: Expression Variable null, father: Expression, left: null, right: Expression )
( self: a _Variable 2.12.1_ex, father: Expression, left: null, right: null )
( self: Expression Variable null, father: Expression, left: Expression, right: Operator )
( self: b _Variable 2.12.1_ex, father: Expression, left: null, right: null )
( self: Operator Operator null, father: Expression, left: Expression, right: null )
( self: * _Operator 2.12.1_ex, father: Operator, left: null, right: null )
( self: FunctionCall null null, father: Sentence, left: Control, right: Return )
( self: printf FUNCTION_NAME 2.14_fc, father: FunctionCall, left: null, right: CallParameterList )
( self: CallParameterList null null, father: FunctionCall, left: printf, right: null )
( self: sum is %d STRING_CONSTANT 2.14_fc, father: CallParameterList, left: null, right: sum )
( self: sum IDENTIFIER 2.14_fc, father: CallParameterList, left: sum is %d, right: null )
( self: Return null null, father: Sentence, left: FunctionCall, right: null )
( self: return RETURN 2.15_re, father: Return, left: null, right: Expression )
( self: Expression SingleOrDoubleOperand null, father: Return, left: return, right: null )
( self: Expression Constant null, father: Expression, left: null, right: null )
( self: 0 _Constant 2.15_ex, father: Expression, left: null, right: null )

目标码生成开始...
if-else语句验证开始...
if_else : 2.8.2_if, 2.8.3_el

==============目标码模式===============
<LOG-EXP>
cmpi 7,0,0,0
beq 7,.L1
<STA-LIST_1>
b .L2
.L1:
<STA-LIST_2>
.L2:

==============目标码模式命题===============
P1 = GPR[0] = <LOG-EXP>
P2 = GPR[0] < 0 -> CR[7] = b100 || GPR[0] > 0 -> CR[7] = b010 || GPR[0] == 0 -> CR[7] = b001
P3 = CR[7] == b100 -> PC = PC + 4 || CR[7] == b010 -> PC = PC + 4 || CR[7] == b001 -> PC = PC + @.L1
P4 = <STA-LIST_1>
P5 = PC = PC + @.L2
P6 = .L1:
P7 = <STA-LIST_2>
P8 = .L2:

==============推导序列===============
S1 = GPR[0] = <LOG-EXP>		P1
S2 = GPR[0] < 0 -> CR[7] = b100 || GPR[0] > 0 -> CR[7] = b010 || GPR[0] == 0 -> CR[7] = b001		P2
S3 = <LOG-EXP> < 0 -> CR[7] = b100 || <LOG-EXP> > 0 -> CR[7] = b010 || <LOG-EXP> == 0 -> CR[7] = b001		S1,S2,MP
S4 = CR[7] == b100 -> PC = PC + 4 || CR[7] == b010 -> PC = PC + 4 || CR[7] == b001 -> PC = PC + @.L1		P3
S5 = <LOG-EXP> < 0 -> PC = PC + 4 || <LOG-EXP> > 0 -> PC = PC + 4 || <LOG-EXP> == 0 -> PC = PC + @.L1		S3,S4,MP
S6 = <STA-LIST_1>		P4
S7 = PC = PC + @.L2		P5
S8 = .L1:		P6
S9 = <STA-LIST_2>		P7
S10 = .L2:		P8
S11 = (<LOG-EXP> < 0 -> PC = PC + 4 || <LOG-EXP> > 0 -> PC = PC + 4 || <LOG-EXP> == 0 -> PC = PC + @.L1) ∧ (<STA-LIST_1>) ∧ (PC = PC + @.L2) ∧ (.L1:) ∧ (<STA-LIST_2>) ∧ (.L2:)		S5, S6, S7, S8, S9, S10, CI
S12 = (<LOG-EXP> != 0 -> <STA-LIST_1> || <LOG-EXP> == 0 -> <STA-LIST_2>)		S11, REDUCE
S13 = (<LOG-EXP> != 0 -> σ(<STA-LIST_1>) || <LOG-EXP> == 0 -> σ(<STA-LIST_2>))		S12, σ

=============给定的目标语义================
<LOG-EXP> != 0 -> σ(<STA-LIST_1>) || <LOG-EXP> == 0 -> σ(<STA-LIST_2>)

===============结论================
给定的目标语义和推理出的语义是否一致 : 
true
if-else语句验证结果 : 验证成功
if-else语句验证结束!

for语句验证开始...
for : 2.8_fo

==============目标码模式===============
<ASS-EXP_1>
b .L2
.L1:
<STA-LIST>
<ASS-EXP_2>
.L2:
<LOG-EXP>
cmpi 7,0,0,0
bne 7,.L1

==============目标码模式命题===============
P1 = <ASS-EXP_1>
P2 = PC = PC + @.L2
P3 = .L1:
P4 = <STA-LIST>
P5 = <ASS-EXP_2>
P6 = .L2:
P7 = GPR[0] = <LOG-EXP>
P8 = GPR[0] < 0 -> CR[7] = b100 || GPR[0] > 0 -> CR[7] = b010 || GPR[0] == 0 -> CR[7] = b001
P9 = CR[7] == b100 -> PC = PC + @.L1 || CR[7] == b010 -> PC = PC + @.L1 || CR[7] == b001 -> PC = PC + 4

=================循环交互证明算法===================
用户输入的语义 :
σ(<ASS-EXP_1>)
{<LOG-EXP> != 0 -> [σ(<STA-LIST>); σ(<ASS-EXP_2>)]} ** n || <LOG-EXP> == 0 -> skip

辅助前提 :
P0 = (σ(<ASS-EXP_1>)) ∧ ({<LOG-EXP> != 0 -> [σ(<STA-LIST>); σ(<ASS-EXP_2>)]} ** n || <LOG-EXP> == 0 -> skip)

推导序列 :
S1 = <ASS-EXP_1>		P1
S2 = PC = PC + @.L2		P2
S3 = .L1:		P3
S4 = <STA-LIST>		P4
S5 = <ASS-EXP_2>		P5
S6 = .L2:		P6
S7 = GPR[0] = <LOG-EXP>		P7
S8 = GPR[0] < 0 -> CR[7] = b100 || GPR[0] > 0 -> CR[7] = b010 || GPR[0] == 0 -> CR[7] = b001		P8
S9 = <LOG-EXP> < 0 -> CR[7] = b100 || <LOG-EXP> > 0 -> CR[7] = b010 || <LOG-EXP> == 0 -> CR[7] = b001		S7,S8,MP
S10 = CR[7] == b100 -> PC = PC + @.L1 || CR[7] == b010 -> PC = PC + @.L1 || CR[7] == b001 -> PC = PC + 4		P9
S11 = <LOG-EXP> < 0 -> PC = PC + @.L1 || <LOG-EXP> > 0 -> PC = PC + @.L1 || <LOG-EXP> == 0 -> PC = PC + 4		S9,S10,MP
S12 = (<ASS-EXP_1>) ∧ (PC = PC + @.L2) ∧ (.L1:) ∧ (<STA-LIST>) ∧ (<ASS-EXP_2>) ∧ (.L2:) ∧ (<LOG-EXP> < 0 -> PC = PC + @.L1 || <LOG-EXP> > 0 -> PC = PC + @.L1 || <LOG-EXP> == 0 -> PC = PC + 4)		S1, S2, S3, S4, S5, S6, S11, CI
S13 = (<ASS-EXP_1>) ∧ (<LOG-EXP> != 0 -> <STA-LIST>; <ASS-EXP_2> || <LOG-EXP> == 0 -> null)		S12, REDUCE
S14 = (σ(<ASS-EXP_1>)) ∧ (<LOG-EXP> != 0 -> [σ(<STA-LIST>); σ(<ASS-EXP_2>)] || <LOG-EXP> == 0 -> skip)		S13, σ
S15 = (σ(<ASS-EXP_1>)) ∧ ({<LOG-EXP> != 0 -> [σ(<STA-LIST>); σ(<ASS-EXP_2>)]} ** N || <LOG-EXP> == 0 -> skip)		P0, n = N
S16 = (σ(<ASS-EXP_1>)) ∧ ({<LOG-EXP> != 0 -> [σ(<STA-LIST>); σ(<ASS-EXP_2>)]} ** (N + 1) || <LOG-EXP> == 0 -> skip)		S14, S15, CI

check(n == 1) :
目标语义 : (σ(<ASS-EXP_1>)) ∧ (<LOG-EXP> != 0 -> [σ(<STA-LIST>); σ(<ASS-EXP_2>)] || <LOG-EXP> == 0 -> skip)
推导序列证据 : S14
目标语义和推理出的语义是否一致 : true

check(n == N + 1) :
目标语义 : (σ(<ASS-EXP_1>)) ∧ ({<LOG-EXP> != 0 -> [σ(<STA-LIST>); σ(<ASS-EXP_2>)]} ** (N + 1) || <LOG-EXP> == 0 -> skip)
推导序列证据 : S16
目标语义和推理出的语义是否一致 : true

综上，给定的目标语义和推理出的语义是否一致 :
true
for语句验证结果 : 验证成功
for语句验证结束!

